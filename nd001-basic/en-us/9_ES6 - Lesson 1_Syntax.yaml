id: 194594
key: 42383e89-ac6a-491a-b7d0-198851287bbe
locale: en-us
version: 1.0.0
title: Syntax
semantic_type: Lesson
updated_at: 'Fri Sep 29 2017 05:27:20 GMT+0000 (UTC)'
is_public: true
image: null
video: null
summary: 'With this major update to the JavaScript language, a number of syntax improvements have been added. In this lesson, you''ll learn to improve your JavaScript code with these syntax updates.'
lesson_type: Classroom
duration: 120
is_project_lesson: false
career_portal_experience_levels: []
_concepts_ids:
  - 196653
  - 196655
  - 217351
  - 196686
  - 217366
  - 196688
  - 217370
  - 196689
  - 196730
  - 196733
  - 196703
  - 196738
  - 217400
  - 196704
  - 196705
  - 217393
  - 196707
_project_id: null
concepts:
  - id: 196653
    key: 08a224ff-d7f5-4086-ab89-f74d3da09d08
    locale: en-us
    version: 1.0.0
    title: 'Harmony, ES6, ES2015...'
    semantic_type: Concept
    updated_at: 'Thu Mar 16 2017 00:50:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232928
      - 282725
    atoms:
      - id: 232928
        key: 84fb6542-2f14-41ce-a76f-9f07d32055eb
        locale: en-us
        version: 1.0.0
        title: 'Harmony, ES6, ES2015...'
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:11:35 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43125'
          youtube_id: DDxsC03d_KU
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f77b5_01-intro-to-the-course/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/hls/playlist.m3u8'
      - id: 282725
        key: 2c384e9a-a61f-43ca-a6be-1a3536fbae00
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Mar 16 2017 00:51:04 GMT+0000 (UTC)'
        is_public: true
        text: "Welcome to the course on ES6! We're glad you're here! \uD83D\uDC4B\uD83C\uDFFC\n\nThis course is all about the new changes brought to the JavaScript programming language. We're expecting that you've worked with JavaScript for a couple of years and have an intermediate level of experience with the language.\n\nIf you're new to the JavaScript language or would like a refresher, check out our [Intro to JavaScript course](https://www.udacity.com/course/intro-to-javascript--ud803). \n\nFollow us!\n\n* [@parkesrjames](https://twitter.com/parkesrjames)\n* [@richardkalehoff](https://twitter.com/richardkalehoff)"
        instructor_notes: ''
        resources: null
  - id: 196655
    key: 5192ff97-3950-4db7-bb7b-0020a61d1d87
    locale: en-us
    version: 1.0.0
    title: Let and Const
    semantic_type: Concept
    updated_at: 'Wed Jan 18 2017 21:38:22 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 196657
      - 196662
      - 196663
      - 197121
      - 197122
      - 257733
      - 196695
      - 196696
      - 196697
      - 217364
    atoms:
      - id: 196657
        key: 8b077400-8fba-4a76-bb44-6100f58fb81a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Oct 28 2016 17:07:26 GMT+0000 (UTC)'
        is_public: true
        text: |-
          There are now two new ways to declare variables in JavaScript: **let** and **const**.

          Up until now, the only way to declare a variable in JavaScript was to use the keyword `var`. To understand why `let` and `const` were added, it’s probably best to look at an example of when using `var` can get us into trouble.

          Take a look at the following code.
        instructor_notes: ''
        resources: null
      - id: 196662
        key: 96e51860-673c-48ee-aec8-e454e316137f
        locale: en-us
        version: 1.0.0
        title: Hoisted to the Top
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Jan 18 2017 19:04:17 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            What do you expect to be the output from running `getClothing(false)`?

            ```js
            function getClothing(isCold) {
              if (isCold) {
                var freezing = 'Grab a jacket!';
              } else {
                var hot = 'It’s a shorts kind of day.';
                console.log(freezing);
              }
            }
            ```
          correct_feedback: 'It actually outputs `undefined`, weird right? Continue reading to learn more about this quirk of JavaScript.'
          video_feedback: null
          default_feedback: Try again.
          answers:
            - id: a1476810114376
              text: 'ReferenceError: freezing is not defined'
              is_correct: false
              incorrect_feedback: 'Most would assume that running `getClothing(false)` would throw a `ReferenceError` because `freezing` is declared inside the scope of the if statement, but that''s not the case.'
            - id: a1476810147102
              text: Grab a jacket!
              is_correct: false
              incorrect_feedback: Not quite. Try creating the `getClothing()` function and running it to see the output. It's probably not what you'd expect.
            - id: a1476810147734
              text: undefined
              is_correct: true
              incorrect_feedback: null
            - id: a1476810148238
              text: It's a shorts kind of day.
              is_correct: false
              incorrect_feedback: Not quite. Try creating the `getClothing()` function and running it to see the output. It's probably not what you'd expect.
      - id: 196663
        key: 11f8c6bf-dcfb-411d-acf8-4c2ac0aa181d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Nov 28 2016 21:58:04 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Hoisting

          Hoisting is a result of how JavaScript is interpreted by your browser. Essentially, before any JavaScript code is executed, all variables are "hoisted", which means they're raised to the top of the function scope. So at run-time, the `getClothing()` function actually looks more like this…
        instructor_notes: ''
        resources: null
      - id: 197121
        key: 24f6e2ab-2cf7-4070-804d-200042b4ab64
        locale: en-us
        version: 1.0.0
        title: Hoisting Animation
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:35:19 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">Before the function is executed, all variables are hoisted to the top of the function scope. So what’s our solution?</div>'
        resources: null
        video:
          id: '40910'
          youtube_id: znkyiX50Ehk
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hls/playlist.m3u8'
      - id: 197122
        key: 8980baa4-1cbc-43a6-9579-185f85e5110f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Jan 18 2017 19:04:43 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## let and const

          Variables declared with `let` and `const` eliminate this specific issue of hoisting because they’re scoped **to the block**, not to the function. Previously, when you used `var`, variables were either scoped _globally_ or _locally_ to an entire function scope.

          If a variable is declared using `let` or `const` inside a block of code (denoted by curly braces `{ }`), then the variable is stuck in what is known as the **temporal dead zone** until the variable’s declaration is processed. This behavior prevents variables from being accessed only until after they’ve been declared.
        instructor_notes: ''
        resources: null
      - id: 257733
        key: 29f1f9a0-51a0-420f-90f8-862b5622da9d
        locale: en-us
        version: 1.0.0
        title: Block Scoped
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:35:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">Variables declared with `let` and `const` are only available within the block they''re declared.</div>'
        resources: null
        video:
          id: '44997'
          youtube_id: tQ02WllxScU
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/hls/playlist.m3u8'
      - id: 196695
        key: 64fe4688-746a-4c02-a405-a3823fa4d25e
        locale: en-us
        version: 1.0.0
        title: Temporal Dead Zone
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Jan 18 2017 19:05:02 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            What do you expect to be the output from running `getClothing(false)`?

            ```js
            function getClothing(isCold) {
              if (isCold) {
                const freezing = 'Grab a jacket!';
              } else {
                const hot = 'It’s a shorts kind of day.';
                console.log(freezing);
              }
            }
            ```
          correct_feedback: 'Because `freezing` is not declared inside the else statement, the function scope, or the global scope, a ReferenceError is thrown.'
          video_feedback: null
          default_feedback: Try again.
          answers:
            - id: a1476822686695
              text: 'ReferenceError: freezing is not defined'
              is_correct: true
              incorrect_feedback: null
            - id: a1480375649190
              text: Grab a jacket!
              is_correct: false
              incorrect_feedback: Not quite. Try creating the `getClothing()` function and running it to see the output.
            - id: a1480375649839
              text: undefined
              is_correct: false
              incorrect_feedback: '`undefined` won''t be output this time. Check out the variable declarations for `freezing` and `hot`. What''s changed?'
            - id: a1480375650358
              text: It's a shorts kind of day.
              is_correct: false
              incorrect_feedback: Not quite. Try creating the `getClothing()` function and running it to see the output.
      - id: 196696
        key: eff67b79-32b7-4059-9307-50070d5d34bd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jan 13 2017 16:35:53 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Rules for using let and const

          `let` and `const` also have some other interesting properties.

          * Variables declared with `let` can be reassigned, but can’t be redeclared in the same scope.
          * Variables declared with `const` must be assigned an initial value, but can’t be redeclared in the same scope, and can’t be reassigned.
        instructor_notes: ''
        resources: null
      - id: 196697
        key: 3b1fd374-123e-4025-948c-03ca1b81dd8d
        locale: en-us
        version: 1.0.0
        title: Assignment with Let
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Jan 18 2017 19:05:17 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            What do you expect to be output from running the following code?

            ```js
            let instructor = 'James';
            instructor = 'Richard';
            console.log(instructor);
            ```
          correct_feedback: This is the correct way to use `let`. Use `let` to declare variables when you plan on changing the value of a variable later in your code.
          video_feedback: null
          default_feedback: Try again.
          answers:
            - id: a1476822752527
              text: James
              is_correct: false
              incorrect_feedback: 'When `instructor` is declared, it''s first defined as "James", but it''s immediately changed to "Richard"'
            - id: a1476822765910
              text: Richard
              is_correct: true
              incorrect_feedback: null
            - id: a1476822769046
              text: undefined
              is_correct: false
              incorrect_feedback: 'In the code snippet, `instructor` is first defined as "James" and then redefined as "Richard".'
            - id: a1480379378224
              text: 'SyntaxError: Identifier ''instructor'' has already been declared'
              is_correct: false
              incorrect_feedback: This error would only be thrown if `instructor` was redeclared again.
      - id: 217364
        key: e1303197-579e-4118-98e4-fcb1691f3ea2
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jan 13 2017 16:40:07 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Use cases

          The big question is when should you use `let` and `const`? The general rule of thumb is as follows:

          * use `let` when you plan to reassign new values to a variable, and
          * use `const` when you don’t plan on reassigning new values to a variable.

          Since `const` is the strictest way to declare a variable, we suggest that you always declare variables with `const` because it'll make your code easier to reason about since you know the identifiers won't change throughout the lifetime of your program. If you find that you need to update a variable or change it, then go back and switch it from `const` to `let`.

          That’s pretty straightforward, right? But what about `var`?

          ## What about var?

          Is there any reason to use `var` anymore? _Not really_.

          There are some arguments that can be made for using `var` in situations where you want to globally define variables, but this is often considered bad practice and should be avoided. From now on, we suggest ditching `var` in place of using `let` and `const`.
        instructor_notes: ''
        resources: null
  - id: 217351
    key: 7c8e752b-d552-4bad-ad3f-0f5f263d5dc9
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Using Let and Const (1-1)'
    semantic_type: Concept
    updated_at: 'Tue Nov 29 2016 02:38:41 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 217374
      - 217367
    atoms:
      - id: 217374
        key: b2f4f888-c8d3-4e67-bc3f-32ddb0d99e79
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Jan 18 2017 23:41:40 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Replace the variable declarations using `let` or `const`.

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 217367
        key: 0a34f90c-e16e-47b8-854d-8755736f4336
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Thu Mar 16 2017 21:20:15 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5739721881944064'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          describe('Your code', function() {
                              // check if i exists
                              it('should have a variable `i`', function() {
                                  assert.isAtLeast(iMatch.length, 1, "The variable `i` doesn't exist");
                              });
                              // check if posts exists
                              it('should have a variable `posts`', function() {
                                  assert.isDefined(posts, "The variable `posts` doesn't exist");
                              });
                              // check if CHARACTER_LIMIT exists
                              it('should have a variable `CHARACTER_LIMIT`', function() {
                                  assert.isDefined(CHARACTER_LIMIT, "The variable `CHARACTER_LIMIT` doesn't exist");
                              });
                          });
                          // define selectors
                          var characterLimitSelector = esquery.parse('[id.name="CHARACTER_LIMIT"]');
                          var postsSelector = esquery.parse('[id.name="posts"]');
                          var iSelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] [id.name="i"]');
                          // query AST with selector
                          var characterLimitMatch = esquery.match(tree, characterLimitSelector);
                          var postsMatch = esquery.match(tree, postsSelector);
                          var iMatch = esquery.match(tree, iSelector);
                          if(characterLimitMatch[0] !== null && postsMatch[0] !== null && iMatch[0] !== null) {
                              describe('Your variable `i`', function() {
                                  it('should be declared using `let`', function() {
                                      var letISelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] VariableDeclaration[kind="let"] [id.name="i"]');
                                      var letIMatch = esquery.match(tree, letISelector);

                                      assert.isAtLeast(letIMatch.length, 1, "The variable `i` isn't declared using `let`");
                                  });
                              });
                              describe('Your variable `posts`', function() {
                                  it('should be declared using `const`', function() {
                                      var letPostsSelector = esquery.parse('VariableDeclaration[kind="const"] [id.name="posts"]');
                                      var letPostsMatch = esquery.match(tree, letPostsSelector);

                                      assert.isAtLeast(letPostsMatch.length, 1, "The variable `posts` isn't declared using `const`");
                                  });
                              });
                              describe('Your variable `CHARACTER_LIMIT`', function() {
                                  it('should be declared using `const`', function() {
                                      var constCharacterLimitSelector = esquery.parse('VariableDeclaration[kind="const"] [id.name="CHARACTER_LIMIT"]');
                                      var constCharacterLimitMatch = esquery.match(tree, constCharacterLimitSelector);

                                      assert.isAtLeast(constCharacterLimitMatch.length, 1, "The variable `CHARACTER_LIMIT` isn't declared using `const`");
                                  });
                              });
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());






                  /* *** James Parkes' Code *** */
                  // // tests to verify the student's code
                  // ;(function() {
                  //     // require assertion library, javascript parser, querying library, and file system
                  //     var chai = require('chai');
                  //     var esprima = require('esprima');
                  //     var esquery = require('esquery');
                  //     var fs = require('fs');

                  //     var assert = chai.assert;
                  //     var tree = '';
                  //     var content = '';

                  //     // get students' file
                  //     content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                  //     // generate abstract systax tree (AST)
                  //     tree = esprima.parse(content);

                  //     // define selector
                  //     var bodySelector = esquery.parse('[body]');
                  //     // query AST with selector
                  //     var bodyMatch = esquery.match(tree, bodySelector);

                  //     // tests
                  //     if(bodyMatch[0].body.length !== 0) {
                  //         // define selectors
                  //         var characterLimitSelector = esquery.parse('[id.name="CHARACTER_LIMIT"]');
                  //         var postsSelector = esquery.parse('[id.name="posts"]');
                  //         var iSelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] [id.name="i"]');
                  //         // query AST with selector
                  //         var characterLimitMatch = esquery.match(tree, characterLimitSelector);
                  //         var postsMatch = esquery.match(tree, postsSelector);
                  //         var iMatch = esquery.match(tree, iSelector);
                  //         describe('Your code', function() {
                  //             // check if i exists
                  //             it('should have a variable `i`', function() {
                  //                 assert.isAtLeast(iMatch.length, 1, "The variable `i` doesn't exist");
                  //             });
                  //             // check if posts exists
                  //             it('should have a variable `posts`', function() {
                  //                 assert.isDefined(posts, "The variable `posts` doesn't exist");
                  //             });
                  //             // check if CHARACTER_LIMIT exists
                  //             it('should have a variable `CHARACTER_LIMIT`', function() {
                  //                 assert.isDefined(CHARACTER_LIMIT, "The variable `CHARACTER_LIMIT` doesn't exist");
                  //             });
                  //         });
                  //         if(characterLimitMatch[0] !== null && postsMatch[0] !== null && iMatch[0] !== null) {
                  //             describe('Your variable `i`', function() {
                  //                 var letISelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] VariableDeclaration[kind="let"] [id.name="i"]');
                  //                 var letIMatch = esquery.match(tree, letISelector);
                  //                 // check that i was declared using let
                  //                 it('should be declared using `let`', function() {
                  //                     assert.isAtLeast(letIMatch.length, 1, "The variable `i` isn't declared using `let`");
                  //                 });
                  //             });
                  //             describe('Your variable `posts`', function() {
                  //                 var letPostsSelector = esquery.parse('VariableDeclaration[kind="let"] [id.name="posts"]');
                  //                 var letPostsMatch = esquery.match(tree, letPostsSelector);
                  //                 // check that posts was declared using let
                  //                 it('should be declared using `let`', function() {
                  //                     assert.isAtLeast(letPostsMatch.length, 1, "The variable `posts` isn't declared using `let`");
                  //                 });
                  //             });
                  //             describe('Your variable `CHARACTER_LIMIT`', function() {
                  //                 var constCharacterLimitSelector = esquery.parse('VariableDeclaration[kind="const"] [id.name="CHARACTER_LIMIT"]');
                  //                 var constCharacterLimitMatch = esquery.match(tree, constCharacterLimitSelector);
                  //                 // check that CHARACTER_LIMIT was declared using const
                  //                 it('should be declared using `const`', function() {
                  //                     assert.isAtLeast(constCharacterLimitMatch.length, 1, "The variable `CHARACTER_LIMIT` isn't declared using `const`");
                  //                 });
                  //             });
                  //         }
                  //     } else {
                  //         describe('Your code', function() {
                  //             it('should not be empty', function() {
                  //                 assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                  //             });
                  //         });
                  //     }

                  // }());
                name: SwizzleAfter.js
        answer: null
  - id: 196686
    key: df4360db-645e-428c-a6bd-3650eab1a13d
    locale: en-us
    version: 1.0.0
    title: Template Literals
    semantic_type: Concept
    updated_at: 'Thu Apr 13 2017 19:49:57 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 196687
      - 217450
      - 217449
      - 197646
      - 197645
    atoms:
      - id: 196687
        key: a6c9cea7-84d4-4749-93dc-0b2ad2ed7c8d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Sat Mar 18 2017 00:47:49 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Prior to ES6, the old way to concatenate strings together was by using the string concatenation operator ( `+` ).

          ```js
          const student = {
            name: 'Richard Kalehoff',
            guardian: 'Mr. Kalehoff'
          };

          const teacher = {
            name: 'Mrs. Wilson',
            room: 'N231'
          }

          let message = student.name + ' please see ' + teacher.name + ' in ' + teacher.room + ' to pick up your report card.';
          ```
          > **Returns:** Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.

          This works alright, but it gets more complicated when you need to build multi-line strings.

          ```js
          let note = teacher.name + ',\n\n' +
            'Please excuse ' + student.name + '.\n' +
            'He is recovering from the flu.\n\n' +
            'Thank you,\n' +
            student.guardian;
          ```
          > **Returns:**<br>
          Mrs. Wilson,

          > Please excuse Richard Kalehoff.<br>
          He is recovering from the flu.

          > Thank you,<br>
          Mr. Kalehoff

          However, that’s changed with the introduction of _template literals_ (previously referred to as "template strings" in development releases of ES6).

          > **NOTE:** As an alternative to using the string concatenation operator ( `+` ), you can use the String's `concat()` method, but both options are rather clunky for simulating true [string interpolation](https://en.wikipedia.org/wiki/String_interpolation).

          ## Template Literals

          **Template literals** are essentially string literals that include embedded expressions.

          Denoted with backticks ( `` `` ``) instead of single quotes ( `''` ) or double quotes ( `""` ), template literals can contain placeholders which are represented using `${expression}`. This makes it _much easier_ to build strings.

          Here's the previous examples using template literals.

          ```js
          let message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;
          ```
          > **Returns:** Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.

          By using template literals, you can drop the quotes along with the string concatenation operator. Also, you can reference the object's properties inside expressions.

          Here, you try. Change the `greeting` string below to use a template literal. Also, feel free to swap in your name for the placeholder.
        instructor_notes: ''
        resources: null
      - id: 217450
        key: d83210ed-bbdf-46ff-ae01-04ba94b6e61d
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Sat Mar 18 2017 00:52:23 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5349265062887424'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var myNameSelector = esquery.parse('[id.name="myName"]');
                          var greetingSelector = esquery.parse('[id.name="greeting"]');
                          // query AST with selector
                          var myNameMatch = esquery.match(tree, myNameSelector);
                          var greetingMatch = esquery.match(tree, greetingSelector);
                          describe('Your code', function() {
                              // check if myName exists
                              it('should have a variable `myName`', function() {
                                  assert.isDefined(myName, "The variable `myName` doesn't exist");
                              });
                              // check if greeting exists
                              it('should have a variable `greeting`', function() {
                                  assert.isDefined(greeting, "The variable `greeting` doesn't exist");
                              });
                          });
                          if(myNameMatch[0] !== null && greetingMatch[0] !== null) {
                              describe('Your code', function() {
                                  // check if greeting has been changed to a template literal
                                  it('should have a template literal `greeting`', function() {
                                      assert.deepEqual('TemplateLiteral', greetingMatch[0].init.type, "The `greeting` string should be changed to a template literal");
                                  });
                              });
                              if(greetingMatch[0].init.type === 'TemplateLiteral') {
                                  describe('Your template literal', function() {
                                      if(greetingMatch[0].init.expressions[0] === null) {
                                          // check if greeting template literal contains an expression
                                          it('should contain an expression', function() {
                                              assert.isOk(false, 'Your template literal is missing an expression');
                                          });
                                      } else {
                                          // check if greeting template literal matches original greeting string
                                          it('should match the original `greeting` string', function() {
                                              assert.deepEqual('Hello, my name is myName', greetingMatch[0].init.quasis[0].value.raw + greetingMatch[0].init.expressions[0].name, "The value of the `greeting` template literal doesn't match the original `greeting` string");
                                          });
                                      }
                                  });
                              }
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
      - id: 217449
        key: dcdfb86c-cbd2-42c4-a556-4b5fa85c226c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Nov 30 2016 17:00:21 GMT+0000 (UTC)'
        is_public: true
        text: ...but what about the multi-line example from before?
        instructor_notes: ''
        resources: null
      - id: 197646
        key: 3344b7cc-2431-43f1-a782-a7aa14a328c5
        locale: en-us
        version: 1.0.0
        title: Template Literals
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:36:15 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">Template literals make multi-line strings easier to read and more concise.</div>'
        resources: null
        video:
          id: '41153'
          youtube_id: fTWnGsGlmrM
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/hls/playlist.m3u8'
      - id: 197645
        key: c3c8c52b-f970-46b2-8de3-12e70481079d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jan 13 2017 16:53:16 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Here’s where template literals really shine. In the animation above, the quotes and string concatenation operator have been dropped, as well as the newline characters ( `\n` ). That's because template literals also preserve newlines as part of the string!

          > **TIP:** Embedded expressions inside template literals can do more than just reference variables. You can perform operations, call functions and use loops inside embedded expressions!
        instructor_notes: ''
        resources: null
  - id: 217366
    key: d652189e-a8af-4bd9-8fcd-aab3587e4d86
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Build an HTML Fragment (1-2)'
    semantic_type: Concept
    updated_at: 'Fri Apr 21 2017 18:46:41 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 217375
      - 217368
    atoms:
      - id: 217375
        key: c6f840f8-7644-40eb-b273-59448b7229df
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Aug 28 2017 23:06:34 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Modify the `createAnimalTradingCardHTML()` function to use a template literal for `cardHTML`.

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 217368
        key: 968596a8-c9ba-48b0-afb2-d951c7750c68
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Sat Mar 18 2017 00:35:36 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5118760878997504'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: // before code goes here
                name: SwizzleBefore.js
              - text: >
                  // tests to verify the student's code

                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          describe('Your code', function() {
                              it('should have an object `cheetah`', function() {
                                  assert.isDefined(cheetah, "The object `cheetah` doesn't exist");
                              });

                              it('should have a function `createAnimalTradingCardHTML()`', function() {
                                  assert.isFunction(createAnimalTradingCardHTML, "The function `createAnimalTradingCardHTML()` doesn't exist");
                              });
                          });

                          describe('The `createAnimalTradingCardHTML` function', function() {
                              it('should have a variable `cardHTML`', function() {
                                  const cardSelector = esquery.parse('[id.name="cardHTML"]');
                                  const cardMatch = esquery.match(tree, cardSelector);
                                  const cardCount = cardMatch.length;

                                  assert.isAtLeast(cardCount, 1, "The variable `cardHTML` doesn't exist");
                              });
                          });

                          describe('The `cardHTML` variable', function() {
                              it('should be a template literal', function() {
                                  const cardSelector = esquery.parse('[id.name="cardHTML"]');
                                  const cardMatch = esquery.match(tree, cardSelector);
                                  const cardType = cardMatch[0] && cardMatch[0].init && cardMatch[0].init.type;

                                  assert.deepEqual('TemplateLiteral', cardType, 'The `cardHTML` string should be changed to a template literal');
                              });

                              it('should contain the correct content');
                          });
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());





                  /* *** James Parkes' Code *** */

                  // // tests to verify the student's code

                  // ;(function() {

                  //     // require assertion library, javascript parser, querying library, and file system

                  //     var chai = require('chai');

                  //     var esprima = require('esprima');

                  //     var esquery = require('esquery');

                  //     var fs = require('fs');


                  //     var assert = chai.assert;

                  //     var tree = '';

                  //     var content = '';


                  //     // get students' file

                  //     content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');

                  //     // generate abstract systax tree (AST)

                  //     tree = esprima.parse(content);


                  //     // define selector

                  //     var bodySelector = esquery.parse('[body]');

                  //     // query AST with selector

                  //     var bodyMatch = esquery.match(tree, bodySelector);


                  //     // tests

                  //     if(bodyMatch[0].body.length !== 0) {

                  //         // define selector

                  //         var cheetahSelector = esquery.parse('[id.name="cheetah"]');

                  //         var functionSelector = esquery.parse('FunctionDeclaration[id.name="createAnimalTradingCardHTML"]');

                  //         // query AST with selector

                  //         var cheetahMatch = esquery.match(tree, cheetahSelector);

                  //         var functionMatch = esquery.match(tree, functionSelector);

                  //         describe('Your code', function() {

                  //             // check if cheetah exists

                  //             it('should have a object `cheetah`', function() {

                  //                 assert.isDefined(cheetah, 'The object `cheetah` doesn\'t exist');

                  //             });

                  //             // check if createAnimalTradingCardHTML() exists

                  //             it('should have a function `createAnimalTradingCardHTML()`', function() {

                  //                 assert.isFunction(createAnimalTradingCardHTML, 'The function `createAnimalTradingCardHTML()` doesn\'t exist');

                  //             });

                  //         });

                  //         if(cheetahMatch[0] !== null && functionMatch[0] !== null) {

                  //             // define selector

                  //             var cardSelector = esquery.parse('[id.name="cardHTML"]');

                  //             // query AST with selector

                  //             var cardMatch = esquery.match(functionMatch[0], cardSelector);

                  //             describe('Your function', function() {

                  //                 // check if cardHTML exists

                  //                 it('should have a variable `cardHTML`', function() {

                  //                     assert.equal(cardMatch.length, 1, 'The variable `cardHTML` doesn\'t exist');

                  //                 });

                  //             });

                  //             if(cardMatch[0] !== null) {

                  //                 describe('Your function', function() {

                  //                     // check if greeting has been changed to a template literal

                  //                     it('should have a template literal `cardHTML`', function() {

                  //                         assert.deepEqual('TemplateLiteral', cardMatch[0].init.type, "The `cardHTML` string should be changed to a template literal");

                  //                     });

                  //                 });

                  //                 if(cardMatch[0].init.type === 'TemplateLiteral') {

                  //                     describe('Your template literal', function() {

                  //                         // check if greeting template literal matches original greeting string

                  //                         it('should match the original `cardHTML` string', function() {

                  //                             assert.equal('<div class="card"><h3 class="name">Cheetah</h3><img src="Cheetah.jpg" alt="Cheetah" class="picture"><div class="description"><p class="fact">Cheetahs have “tear marks” that run from the inside corners of their eyes down to the outside edges of their mouth.</p><ul class="details"><li><span class="bold">Scientific Name</span>: Acinonyx jubatus</li><li><span class="bold">Average Lifespan</span>: 10-12 years</li><li><span class="bold">Average Speed</span>: 68-75 mph</li><li><span class="bold">Diet</span>: carnivore</li></ul><p class="brief">Fastest mammal on land, the cheetah can reach speeds of 60 or perhaps even 70 miles (97 or 113 kilometers) an hour over short distances. It usually chases its prey at only about half that speed, however. After a chase, a cheetah needs half an hour to catch its breath before it can eat.</p></div></div>', createAnimalTradingCardHTML(cheetah).replace(/>[\t\s ]*</g,'><'), "The value of the
                  `cardHTML` template literal doesn't match the original `cardHTML` string");

                  //                         });

                  //                     });

                  //                 }

                  //             }

                  //         }

                  //     } else {

                  //         describe('Your code', function() {

                  //             it('should not be empty', function() {

                  //                 assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');

                  //             });

                  //         });

                  //     }


                  // }());
                name: SwizzleAfter.js
        answer: null
  - id: 196688
    key: 7c7be588-31e9-4c62-9dad-ecf23f943b19
    locale: en-us
    version: 1.0.0
    title: Destructuring
    semantic_type: Concept
    updated_at: 'Tue Nov 29 2016 02:45:57 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 196690
      - 196693
      - 217378
      - 217379
    atoms:
      - id: 196690
        key: 94d1089c-435e-4b4e-8cb4-de220cd8551a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 22:16:13 GMT+0000 (UTC)'
        is_public: true
        text: |-
          In ES6, you can extract data from arrays and objects into distinct variables using _destructuring_.

          This probably sounds like something you’ve done before, for example, look at the two code snippets below that extract data using pre-ES6 techniques:

          ```js
          const point = [10, 25, -34];

          const x = point[0];
          const y = point[1];
          const z = point[2];

          console.log(x, y, z);
          ```
          > **Prints:** 10 25 -34

          The example above shows extracting values from an array.

          ```js
          const gemstone = {
            type: 'quartz',
            color: 'rose',
            karat: 21.29
          };

          const type = gemstone.type;
          const color = gemstone.color;
          const karat = gemstone.karat;

          console.log(type, color, karat);
          ```
          > **Prints:** quartz rose 21.29

          And this example shows extracting values from an object.

          Both are pretty straightforward, however, neither of these examples are actually using destructuring.

          So what exactly is _destructuring_?

          ## Destructuring

          **Destructuring** borrows inspiration from languages like [Perl](https://en.wikipedia.org/wiki/Perl) and [Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29) by allowing you to specify the elements you want to extract from an array or object _on the left side of an assignment_. It sounds a little weird, but you can actually achieve the same result as before, but with much less code; and it's still easy to understand.

          Let’s take a look at both examples rewritten using destructuring.

          ### Destructuring values from an array

          ```js
          const point = [10, 25, -34];

          const [x, y, z] = point;

          console.log(x, y, z);
          ```
          > **Prints:** 10 25 -34

          In this example, the brackets `[ ]` represent the array being destructured and `x`, `y`, and `z` represent the variables where you want to store the values from the array. Notice how you don’t have to specify the indexes for where to extract the values from because the indexes are implied.

          > **TIP:** You can also ignore values when destructuring arrays. For example, `const [x, , z] = point;` ignores the `y` coordinate and discards it.
        instructor_notes: ''
        resources: null
      - id: 196693
        key: 27de1699-3be6-4421-bde8-3f7f6bc5bbea
        locale: en-us
        version: 1.0.0
        title: Array Destructuring
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Jan 18 2017 20:46:49 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            What do you expect to be the value of `second` after running the following code?

            ```js
            let positions = ['Gabrielle', 'Jarrod', 'Kate', 'Fernando', 'Mike', 'Walter'];
            let [first, second, third] = positions;
            ```
          correct_feedback: 'The variables `first`, `second`, and `third` get populated with the first 3 values in the `positions` array while the remaining values are ignored.'
          video_feedback: null
          default_feedback: 'When using destructuring for variable assignment, the indexes for where to extract the values from is implied. That means the first element in the `positions` array is stored inside the variable `first` and so on.'
          answers:
            - id: a1476821337291
              text: Kate
              is_correct: false
              incorrect_feedback: null
            - id: a1484766137661
              text: Gabrielle
              is_correct: false
              incorrect_feedback: null
            - id: a1484766138270
              text: Jarrod
              is_correct: true
              incorrect_feedback: null
            - id: a1484766138998
              text: Walter
              is_correct: false
              incorrect_feedback: null
      - id: 217378
        key: 37884397-7de8-4ab6-9645-f07d67f742ed
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 22:17:23 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### Destructuring values from an object

          ```js
          const gemstone = {
            type: 'quartz',
            color: 'rose',
            karat: 21.29
          };

          const {type, color, karat} = gemstone;

          console.log(type, color, karat);
          ```
          > **Prints:** quartz rose 21.29

          In this example, the curly braces `{ }` represent the object being destructured and `type`, `color`, and `karat` represent the variables where you want to store the properties from the object. Notice how you don’t have to specify the property from where to extract the values. Because `gemstone` has a property named `type`, the value is automatically stored in the `type` variable. Similarly, `gemstone` has a `color` property, so the value of `color` automatically gets stored in the `color` variable. And it's the same with `karat`.

          > **TIP:** You can also specify the values you want to select when destructuring an object. For example, `let {color} = gemstone;` will only select the `color` property from the `gemstone` object.
        instructor_notes: ''
        resources: null
      - id: 217379
        key: feaf1cb3-6f3c-45c4-b262-6f3bd19dc043
        locale: en-us
        version: 1.0.0
        title: Test
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Jan 18 2017 21:19:53 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            What do you expect to be returned from calling `getArea()`?

            ```js
            const circle = {
              radius: 10,
              color: 'orange',
              getArea: function() {
                return Math.PI * this.radius * this.radius;
              },
              getCircumference: function() {
                return 2 * Math.PI * this.radius;
              }
            };

            let {radius, getArea, getCircumference} = circle;
            ```
          correct_feedback: 'Correct! Calling `getArea()` will return `NaN`. When you destructure the object and store the `getArea()` method into the `getArea` variable, it no longer has access to `this` in the `circle` object which results in an area that is `NaN`.'
          video_feedback: null
          default_feedback: 'It''s not what you might think. Look at how the `getArea()` method is defined for the `circle` object. If that method is stored into the variable `getArea()` as a function expression, will it still have access to `this` when called?'
          answers:
            - id: a1480387546709
              text: '314.1592653589793'
              is_correct: false
              incorrect_feedback: null
            - id: a1484774013273
              text: NaN
              is_correct: true
              incorrect_feedback: null
            - id: a1484774013889
              text: '62.83185307179586'
              is_correct: false
              incorrect_feedback: null
            - id: a1484774014457
              text: pie
              is_correct: false
              incorrect_feedback: null
  - id: 217370
    key: e387e1b2-e233-4740-ab60-c231c7926808
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Destructuring Arrays (1-3)'
    semantic_type: Concept
    updated_at: 'Tue Nov 29 2016 02:38:51 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 217376
      - 217372
    atoms:
      - id: 217376
        key: 9e22f1c2-3db7-4a4a-85e6-5f160b4bc023
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jan 20 2017 18:25:44 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Use array destructuring to pull out the three **colors** from the array of `things` and store them into the variables `one`, `two`, and `three`.

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 217372
        key: 745ec3ae-792e-4538-8a61-5ffc6e10460d
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Thu Apr 27 2017 03:31:32 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5833150037098496'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  /* eslint no-unused-vars: "off" */

                  var logBackup = console.log;
                  var logMessages = [];

                  console.log = function () {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };

                  function getASTMatches(esquery, tree, selector) {
                      var result = esquery.parse(selector);
                      return esquery.match(tree, result);
                  }

                  function bodyElementIsNotEmpty(body) {
                      return body[0].body.length !== 0;
                  }
                name: SwizzleBefore.js
              - text: |
                  /* eslint-env es6 */
                  /* global getASTMatches, bodyElementIsNotEmpty, things, one, two, three */

                  (function () {
                      const assert = require('chai').assert;
                      const esprima = require('esprima');
                      const esquery = require('esquery');
                      const content = require('fs').readFileSync(__dirname + '/StudentMain.js', 'utf8');

                      const AST = esprima.parse(content);
                      const body = getASTMatches(esquery, AST, '[body]');

                      if (bodyElementIsNotEmpty(body)) {
                          describe('Your code', function () {
                              it('should have a variable `things`', function () {
                                  assert.isDefined(things, "The variable `things` doesn't exist");
                              });

                              it('should set variable `one` correctly', function () {
                                  assert.isDefined(one, "The variable `one` doesn't exist");
                                  assert.equal(one, 'red', 'The variable `one` should contain the string `"red"`');
                              });

                              it('should set variable `two` correctly', function () {
                                  assert.isDefined(two, "The variable `two` doesn't exist");
                                  assert.equal(two, 'green', 'The variable `two` should contain the string `"green"`');
                              });

                              it('should set variable `three` correctly', function () {
                                  assert.isDefined(three, "The variable `three` doesn't exist");
                                  assert.equal(three, 'blue', 'The variable `three` should contain the string `"blue"`');
                              });

                              it('should use destructuring', function () {
                                  var destructuredArray = getASTMatches(esquery, AST, 'VariableDeclaration ArrayPattern, ExpressionStatement ArrayPattern');

                                  assert.isAtLeast(destructuredArray.length, 1, "Your code doesn't seem to be using array destructuring to access the colors");
                              });
                          });
                      } else {
                          describe('Your code', function () {
                              it('should not be empty', function () {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 196689
    key: 3f34fe2c-c535-4d9d-bceb-89dcd8f50254
    locale: en-us
    version: 1.0.0
    title: Object Literal Shorthand
    semantic_type: Concept
    updated_at: 'Wed Jan 18 2017 21:33:15 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 196691
      - 197648
      - 257769
    atoms:
      - id: 196691
        key: da0a6e70-bb6d-498b-9a9f-0b02aa3a9b94
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Jan 18 2017 21:24:57 GMT+0000 (UTC)'
        is_public: true
        text: |-
          A recurring trend in ES6 is to remove unnecessary repetition in your code. By removing unnecessary repetition, your code becomes easier to read and more concise. This trend continues with the introduction of new _shorthand_ ways for initializing objects and adding methods to objects.

          Let’s see what those look like.

          ## Object literal shorthand

          You’ve probably written code where an object is being initialized using the same property names as the variable names being assigned to them.

          But just in case you haven’t, here’s an example.

          ```js
          let type = 'quartz';
          let color = 'rose';
          let carat = 21.29;

          const gemstone = {
            type: type,
            color: color,
            carat: carat
          };

          console.log(gemstone);
          ```
          > **Prints:** Object {type: "quartz", color: "rose", carat: 21.29}

          Do you see the repetition? Doesn't `type: type`, `color: color`, and `carat:carat` seem redundant?

          The good news is that you can remove those duplicate variables names from object properties _if_ the properties have the same name as the variables being assigned to them.

          Check it out!
        instructor_notes: ''
        resources: null
      - id: 197648
        key: 7c97416e-495e-4b42-9b54-9fc8588e3047
        locale: en-us
        version: 1.0.0
        title: Object Literal Shorthand
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:34:01 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">If object properties have the same name as the variables being assigned to them, then you can drop the duplicate variable names.</div>'
        resources: null
        video:
          id: '41154'
          youtube_id: HF0PN1vHsSY
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/hls/playlist.m3u8'
      - id: 257769
        key: b0f0a8a1-d65f-472f-9231-6e084a632c19
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jan 20 2017 20:42:03 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Speaking of shorthand, there’s also a shorthand way to add methods to objects.

          To see how that looks, let’s start by adding a `calculateWorth()` method to our `gemstone` object. The `calculateWorth()` method will tell us how much our gemstone costs based on its `type`, `color`, and `carat`.

          ```js
          let type = 'quartz';
          let color = 'rose';
          let carat = 21.29;

          const gemstone = {
            type,
            color,
            carat,
            calculateWorth: function() {
              // will calculate worth of gemstone based on type, color, and carat
            }
          };
          ```

          In this example, an anonymous function is being assigned to the property `calculateWorth`, but is the **function** keyword _really_ needed? In ES6, it’s not!

          ## Shorthand method names

          Since you only need to reference the gemstone’s `calculateWorth` property in order to call the function, having the function keyword is redundant, so it can be dropped.

          ```js
          let gemstone = {
            type,
            color,
            carat,
            calculateWorth() { ... }
          };
          ```
        instructor_notes: ''
        resources: null
  - id: 196730
    key: 01c56ec4-634b-4b23-8a41-2fe44acea013
    locale: en-us
    version: 1.0.0
    title: Lesson 1 Checkup
    semantic_type: Concept
    updated_at: 'Sat Dec 03 2016 01:45:37 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 218168
    atoms:
      - id: 218168
        key: 6383e48d-0b8c-4584-b6f7-55d7c4824671
        locale: en-us
        version: 1.0.0
        title: Lesson 1 Checkup
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:20:28 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43218'
          youtube_id: 6wcZNHqmGuc
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/584223a6_32-checkup/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/hls/playlist.m3u8'
  - id: 196733
    key: c48f069c-9de8-4dc4-ab3a-44036400a02d
    locale: en-us
    version: 1.0.0
    title: Iteration
    semantic_type: Concept
    updated_at: 'Thu Sep 28 2017 21:42:47 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 412436
    atoms:
      - id: 412436
        key: 230f13b1-4a7a-435d-aa8a-187a8b11b63c
        locale: en-us
        version: 1.0.0
        title: Iteration
        semantic_type: VideoAtom
        updated_at: 'Thu Sep 28 2017 21:42:44 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '65258'
          youtube_id: Xsc9fRxOw5o
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/September/59cd6bf8_lesson-1-33-l-iteration/lesson-1-33-l-iteration_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/September/59cd6bf8_lesson-1-33-l-iteration/lesson-1-33-l-iteration_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/September/59cd6bf8_lesson-1-33-l-iteration/lesson-1-33-l-iteration_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/September/59cd6bf8_lesson-1-33-l-iteration/lesson-1-33-l-iteration_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/September/59cd6bf8_lesson-1-33-l-iteration/hls/playlist.m3u8'
  - id: 196703
    key: 1b26c80a-00b2-4b3d-a354-c665807e6dda
    locale: en-us
    version: 1.0.0
    title: Family of For Loops
    semantic_type: Concept
    updated_at: 'Tue Oct 18 2016 21:26:14 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 196737
    atoms:
      - id: 196737
        key: c8c6ed8a-429e-45af-a338-0b544c3f4cf3
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Sat Mar 18 2017 01:26:49 GMT+0000 (UTC)'
        is_public: true
        text: |-
          The **for...of loop** is the most recent addition to the family of for loops in JavaScript.

          It combines the strengths of its siblings, the **for loop** and the **for...in loop**, to loop over any type of data that is **iterable** (meaning it follows the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) which we'll look at in lesson 3). By default, this includes the data types String, Array, Map, and Set—notably absent from this list is the `Object` data type (i.e. `{}`). Objects are not iterable, by default.

          Before we look at the for...of loop, let’s first take a quick look at the other for loops to see where they have weaknesses.

          ## The for loop

          The for loop is obviously the most common type of loop there is, so this should be a quick refresher.

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (let i = 0; i < digits.length; i++) {
            console.log(digits[i]);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9

          Really the biggest downside of a for loop is having to keep track of **the counter** and **exit condition**.

          In this example, we’re using the variable `i` as a counter to keep track of the loop and to access values in the array. We’re also using `digits.length` to determine the exit condition for the loop. If you just glance at this code, it can sometimes be confusing exactly what’s happening; especially for beginners.

          While for loops certainly have an advantage when looping through arrays, some data is not structured like an array, so a for loop isn’t always an option.

          ## The for...in loop

          The for...in loop improves upon the weaknesses of the for loop by eliminating the counting logic and exit condition. 

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const index in digits) {
            console.log(digits[index]);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9

          But, you still have to deal with the issue of using an **index** to access the values of the array, and that stinks; it almost makes it more confusing than before.

          Also, the for...in loop can get you into big trouble when you need to add an extra method to an array (or another object). Because for...in loops loop over all enumerable properties, this means if you add any additional properties to the array's prototype, then those properties will also appear in the loop.

          ```js
          Array.prototype.decimalfy = function() {
            for (let i = 0; i < this.length; i++) {
              this[i] = this[i].toFixed(2);
            }
          };

          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const index in digits) {
            console.log(digits[index]);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9<br>
          function() {<br>
          &emsp;for (let i = 0; i < this.length; i++) {<br>
          &emsp;&emsp;this[i] = this[i].toFixed(2);<br>
          &emsp;}<br>
          }

          Gross! This is why for...in loops are discouraged when looping over arrays.

          > **NOTE:** The **forEach loop** is another type of for loop in JavaScript. However, `forEach()` is actually an array method, so it can only be used exclusively with arrays. There is also no way to stop or break a forEach loop. If you need that type of behavior in your loop, you’ll have to use a basic for loop.
        instructor_notes: ''
        resources: null
  - id: 196738
    key: f1955923-744a-4906-8f64-1ddcb34c6da2
    locale: en-us
    version: 1.0.0
    title: For...of Loop
    semantic_type: Concept
    updated_at: 'Fri Jan 20 2017 19:15:02 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 196749
      - 197650
      - 197649
    atoms:
      - id: 196749
        key: e45708c8-1f81-4c3c-9dd7-697c84434d3d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Feb 01 2017 17:48:24 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Finally, we have the mighty for...of loop.

          ## For...of loop

          The **for...of loop** is used to loop over any type of data that is _iterable_.

          You write a **for...of** loop almost exactly like you would write a **for...in** loop, except you swap out `in` with `of` and you can drop the **index**.

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const digit of digits) {
            console.log(digit);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9

          This makes the for...of loop the most concise version of all the for loops.

          > **TIP:** It’s good practice to use plural names for objects that are collections of values. That way, when you loop over the collection, you can use the singular version of the name when referencing individual values in the collection. For example, `for (const button of buttons) {...}`.
        instructor_notes: ''
        resources: null
      - id: 197650
        key: 5cbff402-b02f-460d-8989-1307e4e80e99
        locale: en-us
        version: 1.0.0
        title: Progression of For Loops in JavaScript
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:35:40 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">Progression from the for loop to the for...in loop to the for...of loop.</div>'
        resources: null
        video:
          id: '41155'
          youtube_id: 2GTqDo9bbOM
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/hls/playlist.m3u8'
      - id: 197649
        key: 9b85051a-1082-4706-be9a-994a46b433ca
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Sat Mar 18 2017 01:12:10 GMT+0000 (UTC)'
        is_public: true
        text: |-
          But wait, there’s more! The for...of loop also has some additional benefits that fix the weaknesses of the for and for...in loops.

          You can stop or break a for...of loop at anytime.

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const digit of digits) {
            if (digit % 2 === 0) {
              continue;
            }
            console.log(digit);
          }
          ```
          > **Prints:**<br>
          1<br>
          3<br>
          5<br>
          7<br> 
          9

          And you don’t have to worry about adding new properties to objects. The for...of loop will only loop over the values in the object.

          ```js
          Array.prototype.decimalfy = function() {
            for (i = 0; i < this.length; i++) {
              this[i] = this[i].toFixed(2);
            }
          };

          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const digit of digits) {
            console.log(digit);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9
        instructor_notes: ''
        resources: null
  - id: 217400
    key: 60509a69-3474-45e9-bca5-f3439b6c9cab
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Writing a For...of Loop (1-4)'
    semantic_type: Concept
    updated_at: 'Fri Mar 17 2017 22:00:35 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 256045
      - 283347
      - 258950
    atoms:
      - id: 256045
        key: 571317d9-a4a2-4973-a2e3-18ccf4043f29
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 22:00:36 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Write a `for...of` loop that:

          * loops through each day in the `days` array
          * capitalizes the first letter of the day
          * and prints the day out to the console
        instructor_notes: ''
        resources: null
      - id: 283347
        key: 9ac77835-a76f-4a74-ba22-b8d989aae770
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 22:01:23 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Your code should log the following to the console:

          > Sunday<br>
          > Monday<br>
          > Tuesday<br>
          > Wednesday<br>
          >Thursday<br>
          >Friday<br>
          >Saturday 

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 258950
        key: d131c711-b8de-4798-ade4-eed84f3e75c8
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Fri Mar 17 2017 21:56:01 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '4944563459457024'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var daysSelector = esquery.parse('[id.name="days"]');
                          // query AST with selector
                          var daysMatch = esquery.match(tree, daysSelector);
                          describe('Your code', function() {
                              // check if days exists
                              it('should have a variable `days`', function() {
                                  assert.isDefined(days, 'The variable `days` doesn\'t exist');
                              });
                          });
                          if(daysMatch[0] !== null) {
                              describe('Your variable `days`', function() {
                                  it('should be an array', function() {
                                      assert.isArray(days, 'The variable `days` isn\'t an array');
                                  });
                                  it('should contain the days of the week', function() {
                                      var length = days.length;
                                      var check = days.includes('sunday') && days.includes('monday') && days.includes('tuesday') && days.includes('wednesday') && days.includes('thursday') && days.includes('friday') && days.includes('saturday') && length === 7;
                                      assert.equal(check, true, 'Your `days` array should only contain the days of the week');
                                  });
                              });
                              // define selector
                              var forOfSelector = esquery.parse('ForOfStatement');
                              // query AST with selector
                              var forOfMatch = esquery.match(tree, forOfSelector);
                              if(forOfMatch[0] !== null) {
                                  describe('Your for...of loop', function() {
                                      it('should initialize a variable to keep up with individual days in the loop', function() {
                                          const declarationSelector = esquery.parse('VariableDeclaration');
                                          const declarationMatch = esquery.match(forOfMatch[0], declarationSelector);

                                          assert.equal(declarationMatch.length, 1, 'Your for...of loop is missing a variable to keep up with the individual days in the loop');
                                      });

                                      it('should loop through the `days` array', function() {
                                          const loopOverDays = forOfMatch[0] && forOfMatch[0].right && forOfMatch[0].right.name;

                                          assert.equal(loopOverDays, 'days', "Your for...of loop doesn't loop through the `days` array");
                                      });

                                      it('should print each day capitalized to the console', function() {
                                          const expectedOutput = 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday';

                                          assert.equal(logMessages.toString(), expectedOutput, 'Your for...of loop should capitalize each day and print it to the console');
                                      });
                                  });
                              } else {
                                  describe('Your code', function() {
                                      // check if using a for...of loop
                                      it('should use a for...of loops', function() {
                                          assert.isOk(false, 'Your code is not using a for...of loop');
                                      });
                                  });
                              }
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());






                  /* *** James Parkes' Code *** */
                  // // tests to verify the student's code
                  // ;(function() {
                  //     // require assertion library, javascript parser, querying library, and file system
                  //     var chai = require('chai');
                  //     var esprima = require('esprima');
                  //     var esquery = require('esquery');
                  //     var fs = require('fs');

                  //     var assert = chai.assert;
                  //     var tree = '';
                  //     var content = '';

                  //     // get students' file
                  //     content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                  //     // generate abstract systax tree (AST)
                  //     tree = esprima.parse(content);

                  //     // define selector
                  //     var bodySelector = esquery.parse('[body]');
                  //     // query AST with selector
                  //     var bodyMatch = esquery.match(tree, bodySelector);

                  //     // tests
                  //     if(bodyMatch[0].body.length !== 0) {
                  //         // define selector
                  //         var daysSelector = esquery.parse('[id.name="days"]');
                  //         // query AST with selector
                  //         var daysMatch = esquery.match(tree, daysSelector);
                  //         describe('Your code', function() {
                  //             // check if days exists
                  //             it('should have a variable `days`', function() {
                  //                 assert.isDefined(days, 'The variable `days` doesn\'t exist');
                  //             });
                  //         });
                  //         if(daysMatch[0] !== null) {
                  //             describe('Your variable `days`', function() {
                  //                 it('should be an array', function() {
                  //                     assert.isArray(days, 'The variable `days` isn\'t an array');
                  //                 });
                  //                 it('should contain the days of the week', function() {
                  //                     var length = days.length;
                  //                     var check = days.includes('sunday') && days.includes('monday') && days.includes('tuesday') && days.includes('wednesday') && days.includes('thursday') && days.includes('friday') && days.includes('saturday') && length === 7;
                  //                     assert.equal(check, true, 'Your `days` array should only contain the days of the week');
                  //                 });
                  //             });
                  //             // define selector
                  //             var forOfSelector = esquery.parse('ForOfStatement');
                  //             // query AST with selector
                  //             var forOfMatch = esquery.match(tree, forOfSelector);
                  //             if(forOfMatch[0] !== null) {
                  //                 describe('Your for...of loop', function() {
                  //                     // check if variable is created for loop
                  //                     it('should initialize a variable to keep up with individual days in the loop', function() {
                  //                         // define selector
                  //                         var declarationSelector = esquery.parse('VariableDeclaration');
                  //                         // query AST with selector
                  //                         var declarationMatch = esquery.match(forOfMatch[0], declarationSelector);
                  //                         assert.equal(declarationMatch.length, 1, 'Your for...of loop is missing a variable to keep up with the individual days in the loop');
                  //                     });
                  //                     // check if looping through days
                  //                     it('should loop through the `days` array', function() {
                  //                         assert.equal(forOfMatch[0].right.name, 'days', 'Your for...of loop doesn\'t loop through the `days` array');
                  //                     });
                  //                     //check if days are capitalized and printed to the console
                  //                     it('should print each day capitalized to the console', function() {
                  //                         var expectedOutput = 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday';
                  //                         assert.equal(logMessages.toString(), expectedOutput, 'Your for...of loop should capitalize each day and print it to the console');
                  //                     });
                  //                 });
                  //             } else {
                  //                 describe('Your code', function() {
                  //                     // check if using a for...of loop
                  //                     it('should use a for...of loops', function() {
                  //                         assert.isOk(false, 'Your code is not using a for...of loop');
                  //                     });
                  //                 });
                  //             }
                  //         }
                  //     } else {
                  //         describe('Your code', function() {
                  //             it('should not be empty', function() {
                  //                 assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                  //             });
                  //         });
                  //     }

                  // }());
                name: SwizzleAfter.js
        answer: null
  - id: 196704
    key: 398d36e6-3393-4c50-b870-44a4dffb0ac4
    locale: en-us
    version: 1.0.0
    title: Spread... Operator
    semantic_type: Concept
    updated_at: 'Fri Mar 17 2017 21:00:48 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 197019
      - 283329
      - 197020
    atoms:
      - id: 197019
        key: 60de06e8-d63e-4a68-8dfd-51ba01f50d69
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Sep 28 2017 18:57:10 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Time to switch gears for a moment and check out the spread operator!

          ## Spread operator

          The **spread operator**, written with three consecutive dots ( `...` ), is new in ES6 and gives you the ability to expand, or _spread_, [iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterators) into multiple elements.

          Let’s take a look at a few examples to see how it works.

          ```js
          const books = ["Don Quixote", "The Hobbit", "Alice in Wonderland", "Tale of Two Cities"];
          console.log(...books);
          ```
          > **Prints:** Don Quixote The Hobbit Alice in Wonderland Tale of Two Cities

          ```js
          const primes = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]);
          console.log(...primes);
          ```
          > **Prints:** 2 3 5 7 11 13 17 19 23 29

          If you look at the output from the examples, notice that both the array and set have been expanded into their individual elements. So how is this useful?

          > **NOTE:** Sets are a new built-in object in ES6 that we’ll cover in more detail in a future lesson.
        instructor_notes: ''
        resources: null
      - id: 283329
        key: 3682d4ab-8a31-4eb7-9acd-5fc0f9377217
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 21:05:57 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### Combining arrays with concat

          One example of when the spread operator can be useful is when combining arrays.

          If you’ve ever needed to combine multiple arrays, prior to the spread operator, you were forced to use the Array’s `concat()` method.

          ```js
          const fruits = ["apples", "bananas", "pears"];
          const vegetables = ["corn", "potatoes", "carrots"];
          const produce = fruits.concat(vegetables);
          console.log(produce);
          ```
          > **Prints:** ["apples", "bananas", "pears", "corn", "potatoes", "carrots"]

          This isn’t terrible, but wouldn’t it be nice if there was a shorthand way to write this code?

          For example, something like…

          > ### ⚠️ Upcoming `const` Warning ⚠️
          > If you're following along by copy/pasting the code, then you've already declared the `produce` variable with the `const` keyword. The following code will try to redeclare _and_ reassign the variable, so depending on how you're running the code, it might throw an error.
          > 
          > Remember that variables declared with  `const` cannot be redeclared or reassigned in the same scope.

          ```js
          const produce = [fruits, vegetables];
          console.log(produce);
          ```
          > **Prints:** [Array[3], Array[3]]

          Unfortunately, that doesn’t work.

          Instead of combining both arrays, this code actually adds the `fruits` array at the first index and the `vegetables` array at the second index of the `produce` array.

          How about trying the spread operator?
        instructor_notes: ''
        resources: null
      - id: 197020
        key: c837f4dc-f9d8-4395-a91d-50be1383d858
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Fri Mar 17 2017 20:56:13 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5318067334807552'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var fruitsSelector = esquery.parse('[id.name="fruits"]');
                          var vegetablesSelector = esquery.parse('[id.name="vegetables"]');
                          var produceSelector = esquery.parse('[id.name="produce"]');
                          // query AST with selector
                          var fruitsMatch = esquery.match(tree, fruitsSelector);
                          var vegetablesMatch = esquery.match(tree, vegetablesSelector);
                          var produceMatch = esquery.match(tree, produceSelector);
                          describe('Your code', function() {
                              // check if fruits exists
                              it('should have a variable `fruits`', function() {
                                  assert.isDefined(fruits, "The variable `fruits` doesn't exist");
                              });
                              // check if vegetables exists
                              it('should have a variable `vegetables`', function() {
                                  assert.isDefined(vegetables, "The variable `vegetables` doesn't exist");
                              });
                              // check if produce exists
                              it('should have a variable `produce`', function() {
                                  assert.isDefined(produce, "The variable `produce` doesn't exist");
                              });
                          });
                          if(fruitsMatch[0] !== null && vegetablesMatch[0] !== null && produceMatch[0] !== null) {
                              describe('Your variable `produce`', function() {
                                  // check if produce is an array
                                  it('should be an array', function() {
                                      assert.isArray(produce, 'Your variable `produce` isn\'t an array');
                                  });
                                  // check if produce contains values from fruits array
                                  it('should contain the values from the `fruits` array', function() {
                                      var check1 = produce.includes("apples");
                                      var check2 = produce.includes("bananas");
                                      var check3 = produce.includes("pears");
                                      assert.equal(check1 && check2 && check3, true, 'Your variable `produce` doesn\'t contain the values from the `fruits` array');
                                  });
                                  // check if produce contains values from vegetables array
                                  it('should contain the values from the `vegetables` array', function() {
                                      var check1 = produce.includes("corn");
                                      var check2 = produce.includes("potatoes");
                                      var check3 = produce.includes("carrots");
                                      assert.equal(check1 && check2 && check3, true, 'Your variable `produce` doesn\'t contain the values from the `vegetables` array');
                                  });
                              });
                              describe('Your code', function() {
                                  // check if produce is initialized using spread operators
                                  it('should use spread operator to combine the `fruits` and `vegetables` arrays into the `produce` array', function() {
                                      // define selector
                                      var spreadSelector = esquery.parse('SpreadElement');
                                      // query AST with selector
                                      var spreadMatch = esquery.match(produceMatch[0], spreadSelector);
                                      if(spreadMatch[0] !== null) {
                                          if(spreadMatch.length === 2) {
                                              assert.equal(spreadMatch[0].argument.name, 'fruits', 'Your code doesn\'t _spread_ the fruits array');
                                              assert.equal(spreadMatch[1].argument.name, 'vegetables', 'Your code doesn\'t _spread_ the vegetables array');
                                          } else {
                                              assert.isOk(false, 'Your code should use the spread operator twice');
                                          }
                                      } else {
                                          assert.isOk(false, 'Your code doesn\'t use the spread operator');
                                      }
                                  });
                              });
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 196705
    key: 59aad850-4429-42b8-a9e8-f4a7dded102f
    locale: en-us
    version: 1.0.0
    title: ...Rest Parameter
    semantic_type: Concept
    updated_at: 'Wed Apr 26 2017 23:41:38 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 197021
      - 301422
      - 259972
    atoms:
      - id: 197021
        key: d6d298b9-f83b-41b1-aa46-5a4c6a5dafe5
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 21:11:39 GMT+0000 (UTC)'
        is_public: true
        text: |-
          If you can use the spread operator to _spread_ an array into multiple elements, then certainly there should be a way to bundle multiple elements back into an array, right?

          In fact, there is! It’s called the _rest parameter_, and it’s another new addition in ES6.

          ## Rest parameter

          The **rest parameter**, also written with three consecutive dots ( `...` ), allows you to represent an indefinite number of elements as an array. This can be helpful in a couple of different situations.

          One situation is when assigning the values of an array to variables. For example,

          ```js
          const order = [20.17, 18.67, 1.50, "cheese", "eggs", "milk", "bread"];
          const [total, subtotal, tax, ...items] = order;
          console.log(total, subtotal, tax, items);
          ```
          > **Prints:** 20.17 18.67 1.5 ["cheese", "eggs", "milk", "bread"]

          This code takes the values of the  `order` array and assigns them to individual variables using [destructuring](https://classroom.udacity.com/nanodegrees/nd016/parts/11a45d59-bb81-44a9-be76-042c99e5f051/modules/cbf6deb8-d2cc-4757-b3a9-a1c58a4acd82/lessons/42383e89-ac6a-491a-b7d0-198851287bbe/concepts/7c7be588-31e9-4c62-9dad-ecf23f943b19#destructuring-values-from-an-array). `total`, `subtotal`, and `tax` are assigned the first three values in the array, however, `items` is where you want to pay the most attention.

          By using the rest parameter, `items` is assigned the _rest_ of the values in the array (as an array).
        instructor_notes: ''
        resources: null
      - id: 301422
        key: de0260f8-3acf-4cc8-ab2c-616f2a50efbf
        locale: en-us
        version: 1.0.0
        title: Spread Operator and Rest Parameter Animation
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:43:25 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">You can think of the rest parameter like the opposite of the spread operator; if the spread operator is like unboxing all of the contents of a package, then the rest parameter is like taking all the contents and putting them back into the package.</div>'
        resources: null
        video:
          id: '54461'
          youtube_id: vRtfwfqnVSs
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/hls/playlist.m3u8'
      - id: 259972
        key: 37eaeb3f-194b-4317-9afd-9bcea6a4f671
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 21:16:56 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Variadic functions

          Another use case for the rest parameter is when you’re working with variadic functions. **Variadic functions** are functions that take an indefinite number of arguments.

          For example, let’s say we have a function called `sum()` which calculates the sum of an indefinite amount of numbers. How might the `sum()` function be called during execution?

          ```js
          sum(1, 2);
          sum(10, 36, 7, 84, 90, 110);
          sum(-23, 3000, 575000);
          ```

          There’s literally an endless number of ways the `sum()` function could be called. Regardless of the amount of numbers passed to the function, it should always return the total sum of the numbers.

          ### Using the arguments object

          In previous versions of JavaScript, this type of function would be handled using the [arguments object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments). The **arguments object** is an array-like object that is available as a local variable inside all functions. It contains a value for each argument being passed to the function starting at 0 for the first argument, 1 for the second argument, and so on.

          If we look at the implementation of our `sum()` function, then you’ll see how the arguments object could be used to handle the variable amount of numbers being passed to it.

          ```js
          function sum() {
            let total = 0;  
            for(const argument of arguments) {
              total += argument;
            }
            return total;
          }
          ```

          Now this works fine, but it does have its issues:

          1. If you look at the definition for the `sum()` function, it doesn’t have any parameters.
            * This is misleading because we know the `sum()` function can handle an indefinite amount of arguments.
          2. It can be hard to understand.
            * If you’ve never used the arguments object before, then you would most likely look at this code and wonder where the arguments object is even coming from. Did it appear out of thin air? It certainly looks that way.

          ### Using the rest parameter

          Fortunately, with the addition of the rest parameter, you can rewrite the `sum()` function to read more clearly.

          ```js
          function sum(...nums) {
            let total = 0;  
            for(const num of nums) {
              total += num;
            }
            return total;
          }
          ```

          This version of the `sum()` function is both **more concise** and is **easier to read**. Also, notice the `for...in` loop has been replaced with the new [for...of loop](https://classroom.udacity.com/nanodegrees/nd016/parts/11a45d59-bb81-44a9-be76-042c99e5f051/modules/cbf6deb8-d2cc-4757-b3a9-a1c58a4acd82/lessons/42383e89-ac6a-491a-b7d0-198851287bbe/concepts/f1955923-744a-4906-8f64-1ddcb34c6da2#).
        instructor_notes: ''
        resources: null
  - id: 217393
    key: 6a6c5deb-2f06-4cd7-afab-222716634f10
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Using the Rest Parameter (1-5)'
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 04:27:45 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 256047
      - 258951
    atoms:
      - id: 256047
        key: 7de8342b-002c-4a18-93e1-29109c0e045e
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Jan 23 2017 18:24:57 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Use the rest parameter to create an `average()` function that calculates the average of an _unlimited_ amount of numbers.

          > **TIP:** Make sure to test your code with different values. For example,<br><br>
          > `average(2, 6)` should return `4`<br>
          > `average(2, 3, 3, 5, 7, 10)` should return `5`<br>
          > `average(7, 1432, 12, 13, 100)` should return `312.8`<br>
          > `average()` should return `0`

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 258951
        key: a133cf22-53e1-46d5-95f4-3bfd4bd53bf6
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Fri Mar 17 2017 22:05:40 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5747611345747968'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var averageSelector = esquery.parse('[id.name="average"]');
                          // query AST with selector
                          var averageMatch = esquery.match(tree, averageSelector);
                          describe('Your code', function() {
                              // check if average exists
                              it('should have a function `average()`', function() {
                                  assert.isFunction(average, "The function `average()` doesn't exist");
                              });
                          });
                          if(averageMatch[0] !== null) {
                              describe('Your `average()` function', function() {
                                  // define selector
                                  var restSelector = esquery.parse('RestElement');
                                  // query AST with selector
                                  var restMatch = esquery.match(averageMatch[0], restSelector);
                                  it('should have one parameter', function() {
                                      assert.equal(averageMatch[0].params.length, 1, 'Your `average()` function should only have one parameter');
                                  });
                                  it('should use the rest parameter', function() {
                                      if(restMatch[0] !== null) {
                                          assert.equal(restMatch.length, 1, 'Your `average()` function doesn\'t use the rest parameter');
                                      } else {
                                          assert.isOk(false, 'Your `average()` function doesn\'t use the rest parameter');
                                      }
                                  });
                                  it('should calculate the average of an indefinite amount of numbers', function() {
                                      var answer1 = average(2, 6);
                                      var check1 = 4 === answer1;
                                      var answer2 = average(2, 3, 3, 5, 7, 10);
                                      var check2 = 5 === answer2;
                                      var answer3 = average(7, 1432, 12, 13, 100);
                                      var check3 = 312.8 === answer3;
                                      var answer4 = average();
                                      var check4 = 0 === answer4;
                                      assert.equal(check1 && check2 && check3 && check4, true, 'Your `average()` function doesn\'t calculate average correctly');
                                  });
                              });
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 196707
    key: bd715feb-2540-4f45-9144-8bd6b708f0cd
    locale: en-us
    version: 1.0.0
    title: Lesson 1 Summary
    semantic_type: Concept
    updated_at: 'Fri Dec 23 2016 04:50:06 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232930
    atoms:
      - id: 232930
        key: 16372722-3bd4-479c-bf55-5ea1ab173dbc
        locale: en-us
        version: 1.0.0
        title: Lesson 1 Summary
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:19:55 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43128'
          youtube_id: EG4B0JEkLzk
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f77be_55-outro/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/hls/playlist.m3u8'
