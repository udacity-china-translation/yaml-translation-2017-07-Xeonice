id: 357203
key: ceb0042f-3e00-4bd2-a1d4-7746ec9c138a
locale: zh-cn
version: 1.0.0
title: 使用外部数据渲染 UI
semantic_type: Lesson
updated_at: 'Wed Sep 06 2017 04:04:12 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/June/595195a0_2-4-render-ui-with-external-data2x/2-4-render-ui-with-external-data2x.jpg'
  width: 592
  height: 640
video: null
summary: 在这节课，你将学习在 React 应用的哪个位置获取远程数据，还将学习不同的生命周期阶段以及如何利用这些阶段。
lesson_type: Classroom
duration: 60
is_project_lesson: false
career_portal_experience_levels: []
_concepts_ids:
  - 357191
  - 357192
  - 357193
_project_id: null
concepts:
  - id: 357191
    key: 6449df33-b354-46ec-b3b5-3dc149dc37ed
    locale: zh-cn
    version: 1.0.0
    title: 简介
    semantic_type: Concept
    updated_at: 'Wed Sep 06 2017 04:04:01 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 357171
      - 357172
      - 357173
    atoms:
      - id: 357171
        key: 427a2e87-c84e-4942-afaf-b68692cffc2c
        locale: zh-cn
        version: 1.0.0
        title: 组件生命周期概念
        semantic_type: VideoAtom
        updated_at: 'Wed Sep 06 2017 04:04:01 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '59033'
          youtube_id: 5UbhHLY25iY
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/hls/playlist.m3u8'
      - id: 357172
        key: dde24f14-3d8f-4bef-91e5-71da883da18d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:01 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## `render()` 仅用于渲染！
           
          我在视频中刚刚提到过，但是我想再强调一遍- **不应在 `render` 方法中获取数据**！组件的 `render()` 方法应该仅用于渲染该组件；不应发出任何 HTTP 请求、获取用于显示内容的数据，或者更高 DOM。此外，`render()` 方法不应调用任何执行这些操作的其他函数。 
           
          因为 `render()` 仅用于显示内容，我们将应该处理 Ajax 请求等任务的代码放在 React 的**生命周期事件中**。
        instructor_notes: ''
        resources: null
      - id: 357173
        key: 8c7c2412-b378-4967-9d72-182615417f14
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 25 2017 04:40:49 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## 生命周期
           
          生命周期事件是组件中名称特殊的方法。这些方法会自动绑定到组件实例，React 将在组件生命周期的特定时间点调用这些方法。有很多不同的生命周期事件，但是也有一些最常用的生命周期事件。
           
          * `componentWillMount()`
           
              > 在组件插入 DOM 之前立即被调用
           
          * `componentDidMount()`
           
              > 在组件插入 DOM 之后立即被调用
           
          * `componentWillUnmount()`
           
              > 在组件从 DOM 中删除之前立即被调用
           
          * `componentWillReceiveProps()`
           
              > 每当组件即将接收全新的属性时被调用
           
          要使用其中一个事件，你只需在组件中使用相关名称创建一个方法，React 将调用该方法。这样可以轻松地挂接到 React 组件的不同生命周期阶段。
           
          我们将介绍的生命周期事件（并且将经常在我们的应用中用到！）是 `componentDidMount()` 生命周期事件。
        instructor_notes: ''
        resources: null
  - id: 357192
    key: 0147fcd7-284c-4d98-bfb6-baa843a52cd2
    locale: zh-cn
    version: 1.0.0
    title: componentDidMount 生命周期事件
    semantic_type: Concept
    updated_at: 'Wed Sep 06 2017 04:04:10 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 357177
      - 357178
      - 357174
      - 357175
      - 357176
      - 357179
      - 357180
      - 357181
      - 357182
      - 357183
      - 357184
      - 357185
      - 357186
      - 357187
    atoms:
      - id: 357177
        key: 61adcaae-087c-48ad-82a4-35fbb5aaa165
        locale: zh-cn
        version: 1.0.0
        title: componentDidMount 生命周期事件
        semantic_type: VideoAtom
        updated_at: 'Wed Sep 06 2017 04:04:02 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '58033'
          youtube_id: r4mMii8NTAQ
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/593c903b_02-use-componentdidmount/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/hls/playlist.m3u8'
      - id: 357178
        key: 328e851f-d3c0-4343-88d1-6d0eccf3d0a3
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:03 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## `componentDidMount()` 的工作原理
           
          在上一部分，我们提到 `componentDidMount()` 是组件添加到 DOM 之后立即运行的生命周期钩子，如果你想获取远程数据或发出 Ajax 请求，则应该使用该方法。以下是相关的 React 文档介绍：
           
          > `componentDidMount()` 在组件装载后立即被调用。应该在此方法中进行需要 DOM 节点的初始化。如果你想从远程端点加载数据，那么此处适合实例化网络请求。在此方法中设置状态将触发重新渲染。
           
          我们看一个示例 User 组件：
           
          ```js
          import React, { Component } from 'react';
          import fetchUser from '../utils/UserAPI';
           
          class User extends Component {
            constructor(props) {
              super(props)
           
              this.state = {
                name: '',
                age: ''
              }
            }
           
            componentDidMount() {
              fetchUser().then((user) => this.setState({
                name: user.name,
                age: user.age
              }))
            }
           
            render() {
              return (
                <div>
                  <p>Name: {this.state.name}</p>
                  <p>Age: {this.state.age}</p>
                </div>
              )
            }
          }
           
          export default User;
          ```
           
          你将注意到，该组件具有一个 `componentDidMount()` 生命周期事件。这个组件很容易理解，但是我们还是逐步讲解下它的工作原理：
           
          1. `render()` 方法被调用，然后它会更新具有 `<div>` 的页面（一段是名称，一段是年龄）。值得注意的是，`this.state.name` 和 `this.state.age` 是空字符串（一开始），英寸名称和年龄实际上并不显示出来
          * 组件被装载后，发生 `componentDidMount()` 生命周期事件。
            - 运行 `UserAPI` 的 `fetchUser` 请求，它会向用户数据库发出请求
            - 返回数据后，`setState()` 被调用，并更新 `name` 和 `age` 属性
          * 因为状态已变化，`render()` 再次被调用。这样就会重新渲染页面，但是现在 `this.state.name` 和 `this.state.age` 具有值了
           
          我们使用 `componentDidMount()` 从 Contacts 应用的服务器上获取真实用户吧！
        instructor_notes: ''
        resources: null
      - id: 357174
        key: 19bbb836-e43f-4bab-9b3e-c69139167d7e
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:04 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ## ⚠️ 必需的 API 文件 ⚠️ 

          > 在这门课程的开始阶段，我们给了你两个选择：克隆我们的起始项目或使用 [create-react-app](https://github.com/facebookincubator/create-react-app) 从头开始。如果你使用 create-react-app 构建你的项目，那么在接下来的视频中，你将需要 [ContactsAPI 文件](https://github.com/udacity/reactnd-contacts-complete/blob/master/src/utils/ContactsAPI.js)。
        instructor_notes: ''
        resources: null
      - id: 357175
        key: 3988e134-6f2c-4da9-bbc7-56486f91dba9
        locale: zh-cn
        version: 1.0.0
        title: 使用 API 获取远程通讯录
        semantic_type: VideoAtom
        updated_at: 'Wed Sep 06 2017 04:04:04 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '58034'
          youtube_id: DoDbW-DlwlI
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/hls/playlist.m3u8'
      - id: 357176
        key: 17e8f04f-e9b9-4e4e-92dc-2810b04b4530
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:05 GMT+0000 (UTC)'
        is_public: true
        text: '[这是本视频中所做更改的 commit。](https://github.com/udacity/reactnd-contacts-complete/commit/2f165b6f1c95092722486249b00cb172bcf1d3ab)'
        instructor_notes: ''
        resources: null
      - id: 357179
        key: 51225cff-6a89-49f2-9ab8-c545719370f9
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Sep 06 2017 04:04:06 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 你应该在哪个生命周期方法中发出 Ajax/API 请求？
          correct_feedback: 只能在 componentDidMount 生命周期方法中发出 Ajax 请求。
          video_feedback: null
          default_feedback: 这部分的标题是什么？;-)
          answers:
            - id: a1498526500512
              text: componentDidMount
              is_correct: true
              incorrect_feedback: null
            - id: a1498526516058
              text: componentWillmount
              is_correct: false
              incorrect_feedback: null
            - id: a1498526520063
              text: render
              is_correct: false
              incorrect_feedback: null
            - id: a1498526522762
              text: shouldComponentUpdate
              is_correct: false
              incorrect_feedback: null
      - id: 357180
        key: 3f60284c-9df3-4646-83b6-00641c17052f
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: CheckboxQuizAtom
        updated_at: 'Wed Sep 06 2017 04:04:06 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 为何不能在 render 方法中发出 Ajax 请求？
          correct_feedback: render 方法应该通过属性获得输入，并返回关于 UI (JSX) 的说明，除此之外，没有别的任务了。
          video_feedback: null
          default_feedback: 注意，`render()` 不应修改数据。如果它只是显示内容，你应该选择以下哪个选项？
          answers:
            - id: a1498526603237
              text: render 方法应该是一个“功能纯粹的函数”
              is_correct: true
              incorrect_feedback: null
            - id: a1498526617568
              text: render 不支持普通的 JavaScript
              is_correct: false
              incorrect_feedback: null
            - id: a1498526667416
              text: 你无法完全控制 render 方法何时将被调用
              is_correct: true
              incorrect_feedback: null
            - id: a1498526760567
              text: 你无法在 render 方法中调用函数
              is_correct: false
              incorrect_feedback: null
      - id: 357181
        key: 0a6e158f-cc7b-4a79-ab11-d53a7ac93cc6
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Wed Sep 06 2017 04:04:07 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - 我已经在 `App.js` 中将 `this.state.contacts` 设为空数组
          - 我已经在 `App.js` 中导入 `ContactsAPI.js` 文件
          - 我已经向 `App.js` 添加 `componentDidMount` 生命周期事件
          - '`componentDidMount` 使用 Contacts API 的 `getAll()` 方法返回的用户更新 `this.state.contacts`'
        positive_feedback: 很棒！
        video_feedback: null
        description: ''
      - id: 357182
        key: 4f89596a-c15e-459f-b390-f55d1ae9578f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:08 GMT+0000 (UTC)'
        is_public: true
        text: |
          很棒！`componentDidMount` 使用起来实际上很简单，对吧？
           
          ## 删除通讯录
           
          到目前为止，我们已经能够从 Contacts API 中获取所有用户并将它们添加到 `this.state.contacts`。进展的很顺利。但是缺少的是删除功能。目前，当我们删除通讯录时，它从 `this.state.contacts` 中删除了，但是依然保留在后端数据库中。
           
          我们使用 Contacts API 的 `remove()` 方法更新后端数据库。 
        instructor_notes: ''
        resources: null
      - id: 357183
        key: 2d727445-729d-46dc-9c96-c693010f01d1
        locale: zh-cn
        version: 1.0.0
        title: 05 - 删除通讯录
        semantic_type: VideoAtom
        updated_at: 'Wed Sep 06 2017 04:04:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '58035'
          youtube_id: vHj2BqAW7jA
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/593c9048_05-remove-contacts/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/hls/playlist.m3u8'
      - id: 357184
        key: cb66e6a8-2af1-4390-8512-60d6337b31dc
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:08 GMT+0000 (UTC)'
        is_public: true
        text: '[这是本视频中所做更改的 commit。](https://github.com/udacity/reactnd-contacts-complete/commit/151ea430aea71230811cd395ee08398df9b8f170)'
        instructor_notes: ''
        resources: null
      - id: 357185
        key: 51b4e867-51cb-4757-b4d1-5d6fa02598db
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:09 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ## 丢失所有的通讯录了？

          > 我们正在将通讯录同步到服务器上，任何删除指令将删除所有通讯录。因为我们暂时无法添加新的通讯录，因此如果删掉所有通讯录的话，就卡住了。

          > 要重新获得默认的通讯录列表，只需重启后端服务器。是后端服务器，不是 Contacts 应用本身。
        instructor_notes: ''
        resources: null
      - id: 357186
        key: 30cd37a8-a4ed-4ff6-9444-df1d33d8b884
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Wed Sep 06 2017 04:04:10 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - 我的代码在 `App.js` 中的 `removeContact()` 内对 Contacts API 的 `.remove()` 方法进行了调用
        positive_feedback: 很棒！
        video_feedback: null
        description: ''
      - id: 357187
        key: bb1a53cd-34ff-40ad-bb31-03bae43b12ac
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:10 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## `componentDidMount()` 总结
           
          `componentDidMount()` 是 React 提供的多个生命周期事件之一。当组件被“装载”后（即被渲染之后），`componentDidMount()` 被调用。如果你想动态地获取数据或运行 Ajax 请求，则应该在 `componentDidMount()` 中执行这些操作。
           
          ### 深入研究
           
          * [`componentDidMount()`](https://facebook.github.io/react/docs/react-component.html#componentdidmount) React 文档
        instructor_notes: ''
        resources: null
  - id: 357193
    key: 3612061d-6488-454c-9818-cc6bcba02f5e
    locale: zh-cn
    version: 1.0.0
    title: 课程总结
    semantic_type: Concept
    updated_at: 'Wed Sep 06 2017 04:04:11 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 357188
      - 357189
      - 357190
    atoms:
      - id: 357188
        key: 458b37f5-1476-4cd1-8aff-8a460a540c3d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:10 GMT+0000 (UTC)'
        is_public: true
        text: |
          总结下，生命周期事件是 React 提供的特殊方法，使我们能够挂接到组件生命周期的不同阶段以运行一些代码。有各种不同的生命周期事件，它们将在不同的时间点运行，但是我们可以将它们划分为三大类别：
           
          ### 添加到 DOM 中
          当组件正在被添加到 DOM 中时，这些生命周期事件被调用：
          * `constructor()`
          * `componentWillMount()`
          * `render()`
          * `componentDidMount()`
           
          ### 重新渲染-rendering
          当组件正在重新渲染到 DOM 时，这些生命周期事件被调用
          * `componentWillReceiveProps()`
          * `shouldComponentUpdate()`
          * `componentWillUpdate()`
          * `render()`
          * `componentDidUpdate()`

          ### 从 DOM 中删除
          当组件正在从 DOM 中被删除时，以下生命周期事件被调用
          * `componentWillUnmount()`
           
          可以通过以下图表更清晰地了解所有这些方法都位于生命周期的哪个时间点： 
        instructor_notes: ''
        resources: null
      - id: 357189
        key: 3d95e8be-aab5-41db-8465-e0a66660c508
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Sep 06 2017 04:04:11 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/June/59519fa9_nd019-c1-l4-lifecycle-events/nd019-c1-l4-lifecycle-events.png'
        width: 1558
        height: 1270
        alt: null
        caption: _位于组件生命周期不同阶段的 React 生命周期事件列表。_
        resources: null
        instructor_notes: null
      - id: 357190
        key: 7cebc202-aff2-4dd4-b90c-8a579f6cdf7d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Sep 06 2017 04:04:11 GMT+0000 (UTC)'
        is_public: true
        text: |
          从图片的左上角开始，当 ReactDOM 开始渲染组件时，一切开始了。
           
          可以看出，在列表和此图中，有很多不同的生命周期事件。但是，最常用的是 `componentDidMount()`、`componentWillMount()`、`componentWillUnmount()` 和 `componentWillReceiveProps()`。
           
          ### 深入研究
           
          * [`componentWillMount()`](https://facebook.github.io/react/docs/react-component.html#componentwillmount) React 文档
          * [`componentDidMount()`](https://facebook.github.io/react/docs/react-component.html#componentdidmount) React 文档
          * [`componentWillUnmount()`](https://facebook.github.io/react/docs/react-component.html#componentwillunmount) React 文档
          * [`componentWillReceiveProps()`](https://facebook.github.io/react/docs/react-component.html#componentwillreceiveprops) React 文档
          * [Component Lifecycles](https://facebook.github.io/react/docs/react-component.html#the-component-lifecycle) React 文档
        instructor_notes: ''
        resources: null
