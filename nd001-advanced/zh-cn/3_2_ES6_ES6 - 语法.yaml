id: 410885
key: cd55a1c8-e2db-4936-beaf-4da5907360b9
locale: en-us
version: 1.0.0
title: ES6 - 语法
semantic_type: Lesson
updated_at: 'Thu Sep 28 2017 04:29:05 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/June/594be03a_3-7-optional-fragments2x/3-7-optional-fragments2x.jpg'
  width: 592
  height: 640
video: null
summary: 这次对 JavaScript 语言做出重大更新后，添加了很多语法改善的地方。在这节课，你将学习利用这些语法更新改善你的 JavaScript 代码。
lesson_type: Classroom
duration: 120
is_project_lesson: false
career_portal_experience_levels: []
_concepts_ids:
  - 373657
  - 373658
  - 373659
  - 373660
  - 373661
  - 373662
  - 373664
  - 373666
  - 373665
  - 373663
  - 373671
  - 373668
  - 373667
  - 373669
  - 373670
  - 373672
  - 373673
_project_id: null
concepts:
  - id: 373657
    key: 08a224ff-d7f5-4086-ab89-f74d3da09d08
    locale: zh-cn
    version: 1.0.0
    title: 'Harmony, ES6, ES2015...'
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:04:40 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373609
      - 373610
    atoms:
      - id: 373609
        key: 84fb6542-2f14-41ce-a76f-9f07d32055eb
        locale: zh-cn
        version: 1.0.0
        title: 'Harmony, ES6, ES2015...'
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:04:38 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43125'
          youtube_id: DDxsC03d_KU
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f77b5_01-intro-to-the-course/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/01-intro-to-the-course_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77b5_01-intro-to-the-course/hls/playlist.m3u8'
      - id: 373610
        key: 2c384e9a-a61f-43ca-a6be-1a3536fbae00
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Sep 28 2017 03:13:38 GMT+0000 (UTC)'
        is_public: true
        text: "欢迎学习 ES6 课程！很高兴你能选择这门课程！\uD83D\uDC4B\uD83C\uDFFC\n\n这门课程专门讲解 JavaScript 编程语言的全新变化。我们预计你已经接触 JavaScript 有一段时间，并且具有一定的 JavaScript 经验。\n\n<div style=\"display: none;\">这门课程专门讲解 JavaScript 编程语言的全新变化。我们预计你已经接触 JavaScript 有好几年的时间，并且具有中等水平的 JavaScript 经验。</div>\n\n\n如果你是 JavaScript 新手或想要复习下 JavaScript 知识，请参阅我们的[《JavaScript 入门》课程](https://cn.udacity.com/course/intro-to-javascript--ud803)。\n\n请关注我们！\n"
        instructor_notes: ''
        resources: null
  - id: 373658
    key: 5192ff97-3950-4db7-bb7b-0020a61d1d87
    locale: zh-cn
    version: 1.0.0
    title: Let 和 Const
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:04:45 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373611
      - 373612
      - 373613
      - 373614
      - 373615
      - 373616
      - 373617
      - 373618
      - 373621
      - 373620
    atoms:
      - id: 373611
        key: 8b077400-8fba-4a76-bb44-6100f58fb81a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:40 GMT+0000 (UTC)'
        is_public: true
        text: |-
          现在可以在 JavaScript 中使用两种新的方式来声明变量：**let** 和 **const**。

          到目前为止，在 JavaScript 中声明变量的唯一方式是使用关键字 `var`。为了理解为何添加了 `let` 和 `const`，我们先看一个示例，了解使用 `var` 会带来怎样的麻烦。

          请看看下面的代码。
        instructor_notes: ''
        resources: null
      - id: 373612
        key: 96e51860-673c-48ee-aec8-e454e316137f
        locale: zh-cn
        version: 1.0.0
        title: 停留在顶部
        semantic_type: RadioQuizAtom
        updated_at: 'Mon Sep 11 2017 16:04:40 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            你认为运行 `getClothing(false)` 后的输出是什么？

            ```js
            function getClothing(isCold) {
              if (isCold) {
                var freezing = 'Grab a jacket!';
              } else {
                var hot = 'It's a shorts kind of day.';
                console.log(freezing);
              }
            }
            ```
          correct_feedback: 它实际上输出了 `undefined`，很奇怪吧？请继续阅读，详细了解这个奇怪的 JavaScript 代码。
          video_feedback: null
          default_feedback: 再试一遍。
          answers:
            - id: a1476810114376
              text: ReferenceError：freezing 未定义
              is_correct: false
              incorrect_feedback: 很多人认为运行 `getClothing(false)` 将抛出 `ReferenceError`，因为 `freezing` 是在 if 语句的作用域内声明的，但实际上并非这样。
            - id: a1476810147102
              text: Grab a jacket!
              is_correct: false
              incorrect_feedback: 不太正确。尝试创建 `getClothing()` 函数并运行它，看看输出是什么。很可能不是你所期待的输出。
            - id: a1476810147734
              text: undefined
              is_correct: true
              incorrect_feedback: null
            - id: a1476810148238
              text: 今天适合穿短裤。
              is_correct: false
              incorrect_feedback: 不太正确。尝试创建 `getClothing()` 函数并运行它，看看输出是什么。很可能不是你所期待的输出。
      - id: 373613
        key: 11f8c6bf-dcfb-411d-acf8-4c2ac0aa181d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:41 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 提升

          提升是浏览器解析 JavaScript 的结果。本质上，在执行任何 JavaScript 代码之前，所有变量都会被“提升”，也就是提升到函数作用域的顶部。因此在运行时，`getClothing()` 函数实际上看起来如下所示…
        instructor_notes: ''
        resources: null
      - id: 373614
        key: 24f6e2ab-2cf7-4070-804d-200042b4ab64
        locale: zh-cn
        version: 1.0.0
        title: 提升的动画效果
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:04:41 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">在执行该函数之前，所有变量都会被提升到该函数作用域的顶部。我们该怎么办？</div>'
        resources: null
        video:
          id: '40910'
          youtube_id: znkyiX50Ehk
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hoisting-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/5809080c_hoisting-animation-new/hls/playlist.m3u8'
      - id: 373615
        key: 8980baa4-1cbc-43a6-9579-185f85e5110f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:42 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## let 和 const

          使用 `let` 和 `const` 声明的变量解决了这种提升问题，因为它们的作用域是**到块**，而不是函数。之前，当你使用 `var` 时，变量要么为全局作用域，要么为本地作用域，也就是整个函数作用域。

          如果在代码块（用花括号 `{ }` 表示）中使用 `let` 或 `const` 声明变量，那么该变量会陷入**暂时性死区**，直到该变量的声明被处理。这种行为会阻止变量被访问，除非它们被声明了。
        instructor_notes: ''
        resources: null
      - id: 373616
        key: 29f1f9a0-51a0-420f-90f8-862b5622da9d
        locale: zh-cn
        version: 1.0.0
        title: 块级作用域
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:04:42 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">使用 `let` 和 `const` 声明的变量仅在它们所声明的块中可用。</div>'
        resources: null
        video:
          id: '44997'
          youtube_id: tQ02WllxScU
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/block-scope-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587fb68b_block-scope-animation-new/hls/playlist.m3u8'
      - id: 373617
        key: 64fe4688-746a-4c02-a405-a3823fa4d25e
        locale: zh-cn
        version: 1.0.0
        title: 暂时性死区
        semantic_type: RadioQuizAtom
        updated_at: 'Mon Sep 18 2017 03:38:19 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            你认为运行 `getClothing(false)` 后的输出是什么？

            ```js
            function getClothing(isCold) {
              if (isCold) {
                const freezing = 'Grab a jacket!';
              } else {
                const hot = 'It's a shorts kind of day.';
                console.log(freezing);
              }
            }
            ```
          correct_feedback: 因为 `freezing` 没有在 else 语句、函数作用域或全局作用域内声明，所以抛出 ReferenceError。
          video_feedback: null
          default_feedback: 再试一遍。
          answers:
            - id: a1476822686695
              text: 'ReferenceError: freezing is not defined'
              is_correct: true
              incorrect_feedback: null
            - id: a1480375649190
              text: Grab a jacket!
              is_correct: false
              incorrect_feedback: 不太正确。试着创建 `getClothing()` 函数并运行该函数，看看输出是什么。
            - id: a1480375649839
              text: undefined
              is_correct: false
              incorrect_feedback: 这次不会输出 `undefined`。看看 `freezing` 和 `hot` 的变量声明。有什么变化？
            - id: a1480375650358
              text: It's a shorts kind of day.
              is_correct: false
              incorrect_feedback: 不太正确。试着创建 `getClothing()` 函数并运行该函数，看看输出是什么。
      - id: 373618
        key: eff67b79-32b7-4059-9307-50070d5d34bd
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:43 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 关于使用 let 和 const 的规则

          `let` 和 `const` 还有一些其他有趣特性。

          * 使用 `let` 声明的变量可以重新赋值，但是不能在同一作用域内重新声明。
          * 使用 `const` 声明的变量必须赋初始值，但是不能在同一作用域内重新声明，也无法重新赋值。
        instructor_notes: ''
        resources: null
      - id: 373621
        key: 3b1fd374-123e-4025-948c-03ca1b81dd8d
        locale: zh-cn
        version: 1.0.0
        title: 通过 Let 赋值
        semantic_type: RadioQuizAtom
        updated_at: 'Mon Sep 11 2017 16:04:44 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            你认为运行以下代码后的输出是什么？

            ```js
            let instructor = 'James';
            instructor = 'Richard';
            console.log(instructor);
            ```
          correct_feedback: 这是使用 `let` 的正确方式。如果你打算以后更改代码中某个变量的值，则使用 `let`。
          video_feedback: null
          default_feedback: Try again.
          answers:
            - id: a1476822752527
              text: James
              is_correct: false
              incorrect_feedback: 当声明 `instructor` 时，它首先被定义为"James"，但是很快改成了"Richard"
            - id: a1476822765910
              text: Richard
              is_correct: true
              incorrect_feedback: null
            - id: a1476822769046
              text: undefined
              is_correct: false
              incorrect_feedback: 在该代码段中，`instructor` 首先被定义为 "James"，然后被定义为"Richard"。
            - id: a1480379378224
              text: 'SyntaxError: 标识符 instructor 已经被声明'
              is_correct: false
              incorrect_feedback: 仅在再次声明 `instructor` 时，才会抛出此错误。
      - id: 373620
        key: e1303197-579e-4118-98e4-fcb1691f3ea2
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:44 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 使用案例

          最大的问题是何时应该使用 `let` 和 `const`？一般法则如下：

          * 当你打算为变量重新赋值时，使用 `let`，以及
          * 当你不打算为变量重新赋值时，使用 `const`。

          因为 `const` 是声明变量最严格的方式，我们建议始终使用 `const` 声明变量，因为这样代码更容易读懂，你知道标识符在程序的整个生命周期内都不会改变。如果你发现你需要更新变量或更改变量，则回去将其从 `const` 切换成 `let`。

          很简单吧？但是 `var` 呢？

          ## var 该怎么办？

          还有必要使用 `var` 吗？_没有了_。

          在某些情况下有必要使用 `var`，例如如果你想全局定义变量，但是这种做法通常都不合理，应该避免。从现在开始，建议放弃使用 `var`，改为使用 `let` 和 `const`。
        instructor_notes: ''
        resources: null
  - id: 373659
    key: 7c8e752b-d552-4bad-ad3f-0f5f263d5dc9
    locale: zh-cn
    version: 1.0.0
    title: 测验：使用 Let 和 Const (1-1)
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:04:49 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373619
      - 373622
    atoms:
      - id: 373619
        key: b2f4f888-c8d3-4e67-bc3f-32ddb0d99e79
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:45 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 指导说明：

          使用 `let` 或 `const` 替换变量声明。

          ## 你的代码：
        instructor_notes: ''
        resources: null
      - id: 373622
        key: 0a34f90c-e16e-47b8-854d-8755736f4336
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Mon Sep 11 2017 16:04:48 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5739721881944064'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          describe('Your code', function() {
                              // check if i exists
                              it('should have a variable `i`', function() {
                                  assert.isAtLeast(iMatch.length, 1, "The variable `i` doesn't exist");
                              });
                              // check if posts exists
                              it('should have a variable `posts`', function() {
                                  assert.isDefined(posts, "The variable `posts` doesn't exist");
                              });
                              // check if CHARACTER_LIMIT exists
                              it('should have a variable `CHARACTER_LIMIT`', function() {
                                  assert.isDefined(CHARACTER_LIMIT, "The variable `CHARACTER_LIMIT` doesn't exist");
                              });
                          });
                          // define selectors
                          var characterLimitSelector = esquery.parse('[id.name="CHARACTER_LIMIT"]');
                          var postsSelector = esquery.parse('[id.name="posts"]');
                          var iSelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] [id.name="i"]');
                          // query AST with selector
                          var characterLimitMatch = esquery.match(tree, characterLimitSelector);
                          var postsMatch = esquery.match(tree, postsSelector);
                          var iMatch = esquery.match(tree, iSelector);
                          if(characterLimitMatch[0] !== null && postsMatch[0] !== null && iMatch[0] !== null) {
                              describe('Your variable `i`', function() {
                                  it('should be declared using `let`', function() {
                                      var letISelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] VariableDeclaration[kind="let"] [id.name="i"]');
                                      var letIMatch = esquery.match(tree, letISelector);

                                      assert.isAtLeast(letIMatch.length, 1, "The variable `i` isn't declared using `let`");
                                  });
                              });
                              describe('Your variable `posts`', function() {
                                  it('should be declared using `const`', function() {
                                      var letPostsSelector = esquery.parse('VariableDeclaration[kind="const"] [id.name="posts"]');
                                      var letPostsMatch = esquery.match(tree, letPostsSelector);

                                      assert.isAtLeast(letPostsMatch.length, 1, "The variable `posts` isn't declared using `const`");
                                  });
                              });
                              describe('Your variable `CHARACTER_LIMIT`', function() {
                                  it('should be declared using `const`', function() {
                                      var constCharacterLimitSelector = esquery.parse('VariableDeclaration[kind="const"] [id.name="CHARACTER_LIMIT"]');
                                      var constCharacterLimitMatch = esquery.match(tree, constCharacterLimitSelector);

                                      assert.isAtLeast(constCharacterLimitMatch.length, 1, "The variable `CHARACTER_LIMIT` isn't declared using `const`");
                                  });
                              });
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());






                  /* *** James Parkes' Code *** */
                  // // tests to verify the student's code
                  // ;(function() {
                  //     // require assertion library, javascript parser, querying library, and file system
                  //     var chai = require('chai');
                  //     var esprima = require('esprima');
                  //     var esquery = require('esquery');
                  //     var fs = require('fs');

                  //     var assert = chai.assert;
                  //     var tree = '';
                  //     var content = '';

                  //     // get students' file
                  //     content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                  //     // generate abstract systax tree (AST)
                  //     tree = esprima.parse(content);

                  //     // define selector
                  //     var bodySelector = esquery.parse('[body]');
                  //     // query AST with selector
                  //     var bodyMatch = esquery.match(tree, bodySelector);

                  //     // tests
                  //     if(bodyMatch[0].body.length !== 0) {
                  //         // define selectors
                  //         var characterLimitSelector = esquery.parse('[id.name="CHARACTER_LIMIT"]');
                  //         var postsSelector = esquery.parse('[id.name="posts"]');
                  //         var iSelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] [id.name="i"]');
                  //         // query AST with selector
                  //         var characterLimitMatch = esquery.match(tree, characterLimitSelector);
                  //         var postsMatch = esquery.match(tree, postsSelector);
                  //         var iMatch = esquery.match(tree, iSelector);
                  //         describe('Your code', function() {
                  //             // check if i exists
                  //             it('should have a variable `i`', function() {
                  //                 assert.isAtLeast(iMatch.length, 1, "The variable `i` doesn't exist");
                  //             });
                  //             // check if posts exists
                  //             it('should have a variable `posts`', function() {
                  //                 assert.isDefined(posts, "The variable `posts` doesn't exist");
                  //             });
                  //             // check if CHARACTER_LIMIT exists
                  //             it('should have a variable `CHARACTER_LIMIT`', function() {
                  //                 assert.isDefined(CHARACTER_LIMIT, "The variable `CHARACTER_LIMIT` doesn't exist");
                  //             });
                  //         });
                  //         if(characterLimitMatch[0] !== null && postsMatch[0] !== null && iMatch[0] !== null) {
                  //             describe('Your variable `i`', function() {
                  //                 var letISelector = esquery.parse('FunctionDeclaration[id.name="displayPosts"] VariableDeclaration[kind="let"] [id.name="i"]');
                  //                 var letIMatch = esquery.match(tree, letISelector);
                  //                 // check that i was declared using let
                  //                 it('should be declared using `let`', function() {
                  //                     assert.isAtLeast(letIMatch.length, 1, "The variable `i` isn't declared using `let`");
                  //                 });
                  //             });
                  //             describe('Your variable `posts`', function() {
                  //                 var letPostsSelector = esquery.parse('VariableDeclaration[kind="let"] [id.name="posts"]');
                  //                 var letPostsMatch = esquery.match(tree, letPostsSelector);
                  //                 // check that posts was declared using let
                  //                 it('should be declared using `let`', function() {
                  //                     assert.isAtLeast(letPostsMatch.length, 1, "The variable `posts` isn't declared using `let`");
                  //                 });
                  //             });
                  //             describe('Your variable `CHARACTER_LIMIT`', function() {
                  //                 var constCharacterLimitSelector = esquery.parse('VariableDeclaration[kind="const"] [id.name="CHARACTER_LIMIT"]');
                  //                 var constCharacterLimitMatch = esquery.match(tree, constCharacterLimitSelector);
                  //                 // check that CHARACTER_LIMIT was declared using const
                  //                 it('should be declared using `const`', function() {
                  //                     assert.isAtLeast(constCharacterLimitMatch.length, 1, "The variable `CHARACTER_LIMIT` isn't declared using `const`");
                  //                 });
                  //             });
                  //         }
                  //     } else {
                  //         describe('Your code', function() {
                  //             it('should not be empty', function() {
                  //                 assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                  //             });
                  //         });
                  //     }

                  // }());
                name: SwizzleAfter.js
        answer: null
  - id: 373660
    key: df4360db-645e-428c-a6bd-3650eab1a13d
    locale: zh-cn
    version: 1.0.0
    title: 模板字面量
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:04:55 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373623
      - 373624
      - 373625
      - 373626
      - 373627
    atoms:
      - id: 373623
        key: a6c9cea7-84d4-4749-93dc-0b2ad2ed7c8d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:49 GMT+0000 (UTC)'
        is_public: true
        text: |-
          在 ES6 之前，将字符串连接到一起的旧方法是使用字符串连接运算符 (`+`)。

          ```js
          const student = {
            name: 'Richard Kalehoff',
            guardian: 'Mr. Kalehoff'
          };

          const teacher = {
            name: 'Mrs. Wilson',
            room: 'N231'
          }

          let message = student.name + ' please see ' + teacher.name + ' in ' + teacher.room + ' to pick up your report card.';
          ```
          > **Returns:** Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.

          上述代码能正常运行，但是当你需要连接多行字符串时，就变得更复杂。

          ```js
          let note = teacher.name + ',\n\n' +
            'Please excuse ' + student.name + '.\n' +
            'He is recovering from the flu.\n\n' +
            'Thank you,\n' +
            student.guardian;
          ```
          > **Returns:**<br>
          Mrs. Wilson,

          > Please excuse Richard Kalehoff.<br>
          He is recovering from the flu.

          > Thank you,<br>
          Mr. Kalehoff

          但是，在引入_模板字面量_（之前在 ES6 的开发版本中称为“模板字符串”）之后，这一切有了改变。

          > **注意：**作为字符串连接运算符 ( `+` ) 的替代方法，你可以使用字符串的 `concat()` 方法。但是这两种方式都比较笨拙，无法模拟真正的[字符串插值](https://en.wikipedia.org/wiki/String_interpolation)。

          ## 模板字面量

          **模板字面量**本质上是包含嵌入式表达式的字符串字面量。

          模板字面量用倒引号 ( `` `` ``)（而不是单引号 ( `''` ) 或双引号( `""` )）表示，可以包含用 `${expression}` 表示的占位符。这样更容易构建字符串。

          下面是之前的示例使用模板字面量表示后的效果：

          ```js
          let message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;
          ```
          > **Returns:** Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.

          通过使用模板字面量，你不用再使用引号和字符串连接运算符。此外，你可以在表达式内引用对象的属性。

          现在你来试试。将下面的 `greeting` 字符串改为使用模板字面量。此外，你可以修改占位符的名称。
        instructor_notes: ''
        resources: null
      - id: 373624
        key: d83210ed-bbdf-46ff-ae01-04ba94b6e61d
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Mon Sep 11 2017 16:04:52 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5349265062887424'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var myNameSelector = esquery.parse('[id.name="myName"]');
                          var greetingSelector = esquery.parse('[id.name="greeting"]');
                          // query AST with selector
                          var myNameMatch = esquery.match(tree, myNameSelector);
                          var greetingMatch = esquery.match(tree, greetingSelector);
                          describe('Your code', function() {
                              // check if myName exists
                              it('should have a variable `myName`', function() {
                                  assert.isDefined(myName, "The variable `myName` doesn't exist");
                              });
                              // check if greeting exists
                              it('should have a variable `greeting`', function() {
                                  assert.isDefined(greeting, "The variable `greeting` doesn't exist");
                              });
                          });
                          if(myNameMatch[0] !== null && greetingMatch[0] !== null) {
                              describe('Your code', function() {
                                  // check if greeting has been changed to a template literal
                                  it('should have a template literal `greeting`', function() {
                                      assert.deepEqual('TemplateLiteral', greetingMatch[0].init.type, "The `greeting` string should be changed to a template literal");
                                  });
                              });
                              if(greetingMatch[0].init.type === 'TemplateLiteral') {
                                  describe('Your template literal', function() {
                                      if(greetingMatch[0].init.expressions[0] === null) {
                                          // check if greeting template literal contains an expression
                                          it('should contain an expression', function() {
                                              assert.isOk(false, 'Your template literal is missing an expression');
                                          });
                                      } else {
                                          // check if greeting template literal matches original greeting string
                                          it('should match the original `greeting` string', function() {
                                              assert.deepEqual('Hello, my name is myName', greetingMatch[0].init.quasis[0].value.raw + greetingMatch[0].init.expressions[0].name, "The value of the `greeting` template literal doesn't match the original `greeting` string");
                                          });
                                      }
                                  });
                              }
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
      - id: 373625
        key: dcdfb86c-cbd2-42c4-a556-4b5fa85c226c
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:54 GMT+0000 (UTC)'
        is_public: true
        text: ...那之前的多行示例该怎么办呢？
        instructor_notes: ''
        resources: null
      - id: 373626
        key: 3344b7cc-2431-43f1-a782-a7aa14a328c5
        locale: zh-cn
        version: 1.0.0
        title: 模板字面量
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:04:55 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">模板字面量使多行字符串更容易读懂，并且更简练。</div>'
        resources: null
        video:
          id: '41153'
          youtube_id: fTWnGsGlmrM
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/template-literals-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb01b_template-literals-animation-new/hls/playlist.m3u8'
      - id: 373627
        key: c3c8c52b-f970-46b2-8de3-12e70481079d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:04:55 GMT+0000 (UTC)'
        is_public: true
        text: |-
          这是模板字面量的真正强大之处。在上述动画中，去掉了引号和字符串连接运算符，以及换行符 ( `\n` )。这是因为模板字面量也将换行符当做字符串的一部分！

          > **提示：**模板字面量中的嵌入式表达式不仅仅可以用来引用变量。你可以在嵌入式表达式中进行运算、调用函数和使用循环！
        instructor_notes: ''
        resources: null
  - id: 373661
    key: d652189e-a8af-4bd9-8fcd-aab3587e4d86
    locale: zh-cn
    version: 1.0.0
    title: 测验：构建 HTML 片段 (1-2)
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:01 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373628
      - 373629
    atoms:
      - id: 373628
        key: c6f840f8-7644-40eb-b273-59448b7229df
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 18 2017 04:15:52 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 指定说明：

          修改 `createAnimalTradingCardHTML()` 函数以针对 `cardHTML` 使用模板字面量。结果可以用来创建 HTML 片段以构建 [动物交换卡](https://discussions.youdaxue.com/t/topic/19984)。

          ## 你的代码：
        instructor_notes: ''
        resources: null
      - id: 373629
        key: 968596a8-c9ba-48b0-afb2-d951c7750c68
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Mon Sep 18 2017 04:15:54 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5118760878997504'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: // before code goes here
                name: SwizzleBefore.js
              - text: >
                  // tests to verify the student's code

                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          describe('Your code', function() {
                              it('should have an object `cheetah`', function() {
                                  assert.isDefined(cheetah, "The object `cheetah` doesn't exist");
                              });

                              it('should have a function `createAnimalTradingCardHTML()`', function() {
                                  assert.isFunction(createAnimalTradingCardHTML, "The function `createAnimalTradingCardHTML()` doesn't exist");
                              });
                          });

                          describe('The `createAnimalTradingCardHTML` function', function() {
                              it('should have a variable `cardHTML`', function() {
                                  const cardSelector = esquery.parse('[id.name="cardHTML"]');
                                  const cardMatch = esquery.match(tree, cardSelector);
                                  const cardCount = cardMatch.length;

                                  assert.isAtLeast(cardCount, 1, "The variable `cardHTML` doesn't exist");
                              });
                          });

                          describe('The `cardHTML` variable', function() {
                              it('should be a template literal', function() {
                                  const cardSelector = esquery.parse('[id.name="cardHTML"]');
                                  const cardMatch = esquery.match(tree, cardSelector);
                                  const cardType = cardMatch[0] && cardMatch[0].init && cardMatch[0].init.type;

                                  assert.deepEqual('TemplateLiteral', cardType, 'The `cardHTML` string should be changed to a template literal');
                              });

                              it('should contain the correct content');
                          });
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());





                  /* *** James Parkes' Code *** */

                  // // tests to verify the student's code

                  // ;(function() {

                  //     // require assertion library, javascript parser, querying library, and file system

                  //     var chai = require('chai');

                  //     var esprima = require('esprima');

                  //     var esquery = require('esquery');

                  //     var fs = require('fs');


                  //     var assert = chai.assert;

                  //     var tree = '';

                  //     var content = '';


                  //     // get students' file

                  //     content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');

                  //     // generate abstract systax tree (AST)

                  //     tree = esprima.parse(content);


                  //     // define selector

                  //     var bodySelector = esquery.parse('[body]');

                  //     // query AST with selector

                  //     var bodyMatch = esquery.match(tree, bodySelector);


                  //     // tests

                  //     if(bodyMatch[0].body.length !== 0) {

                  //         // define selector

                  //         var cheetahSelector = esquery.parse('[id.name="cheetah"]');

                  //         var functionSelector = esquery.parse('FunctionDeclaration[id.name="createAnimalTradingCardHTML"]');

                  //         // query AST with selector

                  //         var cheetahMatch = esquery.match(tree, cheetahSelector);

                  //         var functionMatch = esquery.match(tree, functionSelector);

                  //         describe('Your code', function() {

                  //             // check if cheetah exists

                  //             it('should have a object `cheetah`', function() {

                  //                 assert.isDefined(cheetah, 'The object `cheetah` doesn\'t exist');

                  //             });

                  //             // check if createAnimalTradingCardHTML() exists

                  //             it('should have a function `createAnimalTradingCardHTML()`', function() {

                  //                 assert.isFunction(createAnimalTradingCardHTML, 'The function `createAnimalTradingCardHTML()` doesn\'t exist');

                  //             });

                  //         });

                  //         if(cheetahMatch[0] !== null && functionMatch[0] !== null) {

                  //             // define selector

                  //             var cardSelector = esquery.parse('[id.name="cardHTML"]');

                  //             // query AST with selector

                  //             var cardMatch = esquery.match(functionMatch[0], cardSelector);

                  //             describe('Your function', function() {

                  //                 // check if cardHTML exists

                  //                 it('should have a variable `cardHTML`', function() {

                  //                     assert.equal(cardMatch.length, 1, 'The variable `cardHTML` doesn\'t exist');

                  //                 });

                  //             });

                  //             if(cardMatch[0] !== null) {

                  //                 describe('Your function', function() {

                  //                     // check if greeting has been changed to a template literal

                  //                     it('should have a template literal `cardHTML`', function() {

                  //                         assert.deepEqual('TemplateLiteral', cardMatch[0].init.type, "The `cardHTML` string should be changed to a template literal");

                  //                     });

                  //                 });

                  //                 if(cardMatch[0].init.type === 'TemplateLiteral') {

                  //                     describe('Your template literal', function() {

                  //                         // check if greeting template literal matches original greeting string

                  //                         it('should match the original `cardHTML` string', function() {

                  //                             assert.equal('<div class="card"><h3 class="name">Cheetah</h3><img src="Cheetah.jpg" alt="Cheetah" class="picture"><div class="description"><p class="fact">Cheetahs have “tear marks” that run from the inside corners of their eyes down to the outside edges of their mouth.</p><ul class="details"><li><span class="bold">Scientific Name</span>: Acinonyx jubatus</li><li><span class="bold">Average Lifespan</span>: 10-12 years</li><li><span class="bold">Average Speed</span>: 68-75 mph</li><li><span class="bold">Diet</span>: carnivore</li></ul><p class="brief">Fastest mammal on land, the cheetah can reach speeds of 60 or perhaps even 70 miles (97 or 113 kilometers) an hour over short distances. It usually chases its prey at only about half that speed, however. After a chase, a cheetah needs half an hour to catch its breath before it can eat.</p></div></div>', createAnimalTradingCardHTML(cheetah).replace(/>[\t\s ]*</g,'><'), "The value of the
                  `cardHTML` template literal doesn't match the original `cardHTML` string");

                  //                         });

                  //                     });

                  //                 }

                  //             }

                  //         }

                  //     } else {

                  //         describe('Your code', function() {

                  //             it('should not be empty', function() {

                  //                 assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');

                  //             });

                  //         });

                  //     }


                  // }());
                name: SwizzleAfter.js
        answer: null
  - id: 373662
    key: 7c7be588-31e9-4c62-9dad-ecf23f943b19
    locale: zh-cn
    version: 1.0.0
    title: 解构
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:04 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373630
      - 373631
      - 373632
      - 373633
    atoms:
      - id: 373630
        key: 94d1089c-435e-4b4e-8cb4-de220cd8551a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 18 2017 04:31:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          在 ES6 中，你可以使用_解构_从数组和对象中提取值并赋给独特的变量。

          听起来好像你之前就这么做过，例如，看看下面的两个代码段，它们使用 ES6 之前的技巧提取数据：

          ```js
          const point = [10, 25, -34];

          const x = point[0];
          const y = point[1];
          const z = point[2];

          console.log(x, y, z);
          ```
          > **Prints:** 10 25 -34

          上述示例显示了从数组中提取值的过程。

          ```js
          const gemstone = {
            type: 'quartz',
            color: 'rose',
            karat: 21.29
          };

          const type = gemstone.type;
          const color = gemstone.color;
          const karat = gemstone.karat;

          console.log(type, color, karat);
          ```
          > **Prints:** quartz rose 21.29

          该示例显示了从对象中提取值的过程。

          二者都很简单，但是这两个示例都没用到解构。

          那么_解构_到底是什么？

          ## 解构

          **解构**这一概念从 [Perl](https://zh.wikipedia.org/wiki/Perl) 和 [Python](https://zh.wikipedia.org/wiki/Python) 等语言中获得灵感，使你能够指定要从赋值左侧上的数组或对象中提取的元素。听起来有点奇怪，实际上可以获得和之前一样的结果，但是用到的代码确更少；依然很好理解。

          我们看看这两个示例使用解构编写后的效果。

          ### 解构数组中的值

          ```js
          const point = [10, 25, -34];

          const [x, y, z] = point;

          console.log(x, y, z);
          ```
          > **Prints:** 10 25 -34

          在此示例中，方括号 `[ ]` 表示被解构的数组，`x`、`y` 和 `z` 表示要将数组中的值存储在其中的变量。注意，你不需要指定要从中提取值的索引，因为索引可以暗示出来。

          > **提示：**在解构数组时，还可以忽略值。例如，`const [x, , z] = point;` 忽略了 `y` 坐标。
        instructor_notes: ''
        resources: null
      - id: 373631
        key: 27de1699-3be6-4421-bde8-3f7f6bc5bbea
        locale: zh-cn
        version: 1.0.0
        title: 数组解构
        semantic_type: RadioQuizAtom
        updated_at: 'Mon Sep 11 2017 16:05:02 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            你认为在运行以下代码后，`second` 的值是多少？

            ```js
            let positions = ['Gabrielle', 'Jarrod', 'Kate', 'Fernando', 'Mike', 'Walter'];
            let [first, second, third] = positions;
            ```
          correct_feedback: 变量 `first`、`second` 和 `third` 用 `positions` 数组中的前三个值进行填充，剩下的值被忽略。
          video_feedback: null
          default_feedback: 在使用解构进行变量赋值时，会暗示要从哪个索引位置提取值。也就是 `positions` 数组中的第一个元素存储在变量 `first` 中，以此类推。
          answers:
            - id: a1476821337291
              text: Kate
              is_correct: false
              incorrect_feedback: null
            - id: a1484766137661
              text: Gabrielle
              is_correct: false
              incorrect_feedback: null
            - id: a1484766138270
              text: Jarrod
              is_correct: true
              incorrect_feedback: null
            - id: a1484766138998
              text: Walter
              is_correct: false
              incorrect_feedback: null
      - id: 373632
        key: 37884397-7de8-4ab6-9645-f07d67f742ed
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:03 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### 解构对象中的值

          ```js
          const gemstone = {
            type: 'quartz',
            color: 'rose',
            karat: 21.29
          };

          const {type, color, karat} = gemstone;

          console.log(type, color, karat);
          ```
          > **Prints:** quartz rose 21.29

          在此示例中，花括号 `{ }` 表示被解构的对象，`type`、`color` 和 `karat` 表示要将对象中的属性存储到其中的变量。注意不用指定要从其中提取值的属性。因为 `gemstone` 具有 `type` 属性，值自动存储在 `type` 变量中。类似地，`gemstone` 具有 `color` 属性，因此 `color` 的值自动存储在 `color` 变量中。`karat` 也一样。

          > **提示：**你还可以指定在解构对象时要选择的值。例如，`let {color} = gemstone;` 将仅选择 `gemstone` 对象中的 `color` 属性。
        instructor_notes: ''
        resources: null
      - id: 373633
        key: feaf1cb3-6f3c-45c4-b262-6f3bd19dc043
        locale: zh-cn
        version: 1.0.0
        title: 测验
        semantic_type: RadioQuizAtom
        updated_at: 'Mon Sep 11 2017 16:05:03 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            你认为调用 `getArea()` 后会返回什么？

            ```js
            const circle = {
              radius: 10,
              color: 'orange',
              getArea: function() {
                return Math.PI * this.radius * this.radius;
              },
              getCircumference: function() {
                return 2 * Math.PI * this.radius;
              }
            };

            let {radius, getArea, getCircumference} = circle;
            ```
          correct_feedback: 正确！调用 `getArea()` 将返回 `NaN`。在解构该对象并将 `getArea()` 方法存储到 `getArea` 变量中时，它无法再访问 `circle` 对象中的 `this`，得出面积 `NaN`。
          video_feedback: null
          default_feedback: 和你想象的不一样。看看 `circle` 对象的 `getArea()` 方法是如何定义的。如果该方法被当做函数表达式存储在变量 `getArea()` 中，它在被调用时依然可以访问 `this` 吗？
          answers:
            - id: a1480387546709
              text: '314.1592653589793'
              is_correct: false
              incorrect_feedback: null
            - id: a1484774013273
              text: NaN
              is_correct: true
              incorrect_feedback: null
            - id: a1484774013889
              text: '62.83185307179586'
              is_correct: false
              incorrect_feedback: null
            - id: a1484774014457
              text: pie
              is_correct: false
              incorrect_feedback: null
  - id: 373664
    key: e387e1b2-e233-4740-ab60-c231c7926808
    locale: zh-cn
    version: 1.0.0
    title: 测验：解构数组 (1-3)
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:07 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373635
      - 373636
    atoms:
      - id: 373635
        key: 9e22f1c2-3db7-4a4a-85e6-5f160b4bc023
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:04 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 指导说明：

          使用数组解构从 `things` 数组中获取三个**颜色**，并将它们存储在变量 `one`、`two` 和 `three` 中。

          ## 你的代码：
        instructor_notes: ''
        resources: null
      - id: 373636
        key: 745ec3ae-792e-4538-8a61-5ffc6e10460d
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Mon Sep 11 2017 16:05:06 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5833150037098496'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  /* eslint no-unused-vars: "off" */

                  var logBackup = console.log;
                  var logMessages = [];

                  console.log = function () {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };

                  function getASTMatches(esquery, tree, selector) {
                      var result = esquery.parse(selector);
                      return esquery.match(tree, result);
                  }

                  function bodyElementIsNotEmpty(body) {
                      return body[0].body.length !== 0;
                  }
                name: SwizzleBefore.js
              - text: |
                  /* eslint-env es6 */
                  /* global getASTMatches, bodyElementIsNotEmpty, things, one, two, three */

                  (function () {
                      const assert = require('chai').assert;
                      const esprima = require('esprima');
                      const esquery = require('esquery');
                      const content = require('fs').readFileSync(__dirname + '/StudentMain.js', 'utf8');

                      const AST = esprima.parse(content);
                      const body = getASTMatches(esquery, AST, '[body]');

                      if (bodyElementIsNotEmpty(body)) {
                          describe('Your code', function () {
                              it('should have a variable `things`', function () {
                                  assert.isDefined(things, "The variable `things` doesn't exist");
                              });

                              it('should set variable `one` correctly', function () {
                                  assert.isDefined(one, "The variable `one` doesn't exist");
                                  assert.equal(one, 'red', 'The variable `one` should contain the string `"red"`');
                              });

                              it('should set variable `two` correctly', function () {
                                  assert.isDefined(two, "The variable `two` doesn't exist");
                                  assert.equal(two, 'green', 'The variable `two` should contain the string `"green"`');
                              });

                              it('should set variable `three` correctly', function () {
                                  assert.isDefined(three, "The variable `three` doesn't exist");
                                  assert.equal(three, 'blue', 'The variable `three` should contain the string `"blue"`');
                              });

                              it('should use destructuring', function () {
                                  var destructuredArray = getASTMatches(esquery, AST, 'VariableDeclaration ArrayPattern, ExpressionStatement ArrayPattern');

                                  assert.isAtLeast(destructuredArray.length, 1, "Your code doesn't seem to be using array destructuring to access the colors");
                              });
                          });
                      } else {
                          describe('Your code', function () {
                              it('should not be empty', function () {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 373666
    key: 3f34fe2c-c535-4d9d-bceb-89dcd8f50254
    locale: zh-cn
    version: 1.0.0
    title: 对象字面量简写法
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:08 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373637
      - 373638
      - 373639
    atoms:
      - id: 373637
        key: da0a6e70-bb6d-498b-9a9f-0b02aa3a9b94
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 18 2017 06:17:05 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ES6 中经常出现的一个现象是删掉不必要的重复代码。通过删掉不必要的重复代码，代码更容易读懂，并且更简练。推出的新_简写法_（用来初始化对象并向对象中添加方法）就是这一体现。

          我们看看具体情况。

          ## 对象字面量简写法

          你可能写过这样的代码：使用和所分配的变量名称相同的名称初始化对象。

          如果没写过的话，看看下面的示例。

          ```js
          let type = 'quartz';
          let color = 'rose';
          let carat = 21.29;

          const gemstone = {
            type: type,
            color: color,
            carat: carat
          };

          console.log(gemstone);
          ```
          > **Prints:** Object {type: "quartz", color: "rose", carat: 21.29}

          看到重复的地方了吗？`type: type`、`color: color` 和 `carat:carat` 不显得很冗长吗？

          好消息是，如果属性名称和所分配的变量名称一样，那么就可以从对象属性中删掉这些重复的变量名称。

          我们来看看！
        instructor_notes: ''
        resources: null
      - id: 373638
        key: 7c97416e-495e-4b42-9b54-9fc8588e3047
        locale: zh-cn
        version: 1.0.0
        title: 对象字面量简写法
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:05:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">如果对象属性的名称和所分配的变量的名称相同，则可以删掉重复的变量名称。</div>'
        resources: null
        video:
          id: '41154'
          youtube_id: HF0PN1vHsSY
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/object-literal-shorthand-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb0df_object-literal-shorthand-animation-new/hls/playlist.m3u8'
      - id: 373639
        key: b0f0a8a1-d65f-472f-9231-6e084a632c19
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:08 GMT+0000 (UTC)'
        is_public: true
        text: |-
          说到简写法，还有一种向对象中添加方法的简写方式。

          要看看具体写法，我们先向 `gemstone` 对象添加 `calculateWorth()` 方法。`calculateWorth()` 方法将根据宝石的 `type`、`color` 和 `carat` 告诉我们宝石成本多少。

          ```js
          let type = 'quartz';
          let color = 'rose';
          let carat = 21.29;

          const gemstone = {
            type,
            color,
            carat,
            calculateWorth: function() {
              // will calculate worth of gemstone based on type, color, and carat
            }
          };
          ```

          在此示例中，匿名函数被分配给属性 `calculateWorth`，但是真的需要 **function** 关键字吗？在 ES6 中不需要！

          ## 简写方法名称

          因为只需引用 gemstone 的 `calculateWorth` 属性以便调用该函数，因此关键字 function 是多余的，可以删掉。

          ```js
          let gemstone = {
            type,
            color,
            carat,
            calculateWorth() { ... }
          };
          ```
        instructor_notes: ''
        resources: null
  - id: 373665
    key: 01c56ec4-634b-4b23-8a41-2fe44acea013
    locale: zh-cn
    version: 1.0.0
    title: 第 1 节课知识点检验
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:10 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373640
    atoms:
      - id: 373640
        key: 6383e48d-0b8c-4584-b6f7-55d7c4824671
        locale: zh-cn
        version: 1.0.0
        title: 第 1 节课知识点检验
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:05:09 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43218'
          youtube_id: 6wcZNHqmGuc
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/584223a6_32-checkup/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/32-checkup_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/584223a6_32-checkup/hls/playlist.m3u8'
  - id: 373663
    key: c48f069c-9de8-4dc4-ab3a-44036400a02d
    locale: zh-cn
    version: 1.0.0
    title: 迭代
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:11 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373634
    atoms:
      - id: 373634
        key: 3285c65d-dfc4-42d0-bb34-adeb77030492
        locale: zh-cn
        version: 1.0.0
        title: 迭代
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:05:10 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43127'
          youtube_id: lGigA8Y47PY
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f77bb_33-iteration/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77bb_33-iteration/33-iteration_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77bb_33-iteration/33-iteration_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77bb_33-iteration/33-iteration_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77bb_33-iteration/33-iteration_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77bb_33-iteration/hls/playlist.m3u8'
  - id: 373671
    key: 1b26c80a-00b2-4b3d-a354-c665807e6dda
    locale: zh-cn
    version: 1.0.0
    title: For 循环系列
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:12 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373652
    atoms:
      - id: 373652
        key: c8c6ed8a-429e-45af-a338-0b544c3f4cf3
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Sep 28 2017 03:06:34 GMT+0000 (UTC)'
        is_public: true
        text: |-
          **for...of 循环**是最新添加到 JavaScript 循环系列中的循环。

          它结合了其兄弟循环形式 **for 循环**和 **for...in 循环**的优势，可以循环任何**可迭代**（也就是遵守[可迭代协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols)<span style="display: none;">，我们将在第 3 节课中讲解</span>）类型的数据。默认情况下，包含以下数据类型：String、Array、Map 和 Set，注意不包含 `Object` 数据类型（即 `{}`）。默认情况下，对象不可迭代。

          在研究 ...of 循环之前，先快速了解下其他 for 循环，看看它们有哪些不足之处。

          ## for 循环

          for 循环很明显是最常见的循环类型，因此快速复习下即可。

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (let i = 0; i < digits.length; i++) {
            console.log(digits[i]);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9

          for 循环的最大缺点是需要跟踪**计数器**和**退出条件**。

          在此示例中，我们使用变量 `i` 作为计数器来跟踪循环并访问数组中的值。我们还使用 `digits.length` 来判断循环的退出条件。如果只看一眼这段代码，有时候会比较困惑，尤其是对于初学者而言。

          虽然 for 循环在循环数组时的确具有优势，但是某些数据结构不是数组，因此并非始终适合使用 loop 循环。

          ## for...in 循环

          for...in 循环改善了 for 循环的不足之处，它消除了计数器逻辑和退出条件。 

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const index in digits) {
            console.log(digits[index]);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9

          但是依然需要使用 **index** 来访问数组的值，这样很麻烦；几乎比之前更让人迷惑。

          此外，当你需要向数组中添加额外的方法（或另一个对象）时，for...in 循环会带来很大的麻烦。因为 for...in 循环循环访问所有可枚举的属性，意味着如果向数组的原型中添加任何其他属性，这些属性也会出现在循环中。

          ```js
          Array.prototype.decimalfy = function() {
            for (let i = 0; i < this.length; i++) {
              this[i] = this[i].toFixed(2);
            }
          };

          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const index in digits) {
            console.log(digits[index]);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9<br>
          function() {<br>
          &emsp;for (let i = 0; i < this.length; i++) {<br>
          &emsp;&emsp;this[i] = this[i].toFixed(2);<br>
          &emsp;}<br>
          }

          太可怕！这就是为何在循环访问数组时，不建议使用 for...in 循环。

          > **注意：** **forEach 循环** 是另一种形式的 JavaScript 循环。但是，`forEach()` 实际上是数组方法，因此只能用在数组中。也无法停止或退出 forEach 循环。如果希望你的循环中出现这种行为，则需要使用基本的 for 循环。
        instructor_notes: ''
        resources: null
  - id: 373668
    key: f1955923-744a-4906-8f64-1ddcb34c6da2
    locale: zh-cn
    version: 1.0.0
    title: For...of 循环
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:14 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373642
      - 373641
      - 373643
    atoms:
      - id: 373642
        key: e45708c8-1f81-4c3c-9dd7-697c84434d3d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 18 2017 06:37:28 GMT+0000 (UTC)'
        is_public: true
        text: |-
          最后，我们要提到强大的...of 循环了。

          ## For...of 循环

          **for...of 循环**用于循环访问任何_可迭代的_数据类型。

          **for...of** 循环的编写方式和 **for...in** 循环的基本一样，只是将 `in` 替换为 `of`，可以忽略**索引**。

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const digit of digits) {
            console.log(digit);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9

          这使得 for...of 循环成为所有 for 循环中最简洁的版本。

          > **提示：**建议使用复数对象名称来表示多个值的集合。这样，循环该集合时，可以使用名称的单数版本来表示集合中的单个值。例如，`for (const button of buttons) {…}`。
        instructor_notes: ''
        resources: null
      - id: 373641
        key: 5cbff402-b02f-460d-8989-1307e4e80e99
        locale: zh-cn
        version: 1.0.0
        title: JavaScript 中的 for 循环发展历史
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:05:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">从 for 循环完善为 for...in 循环，再完善为 for...of 循环。</div>'
        resources: null
        video:
          id: '41155'
          youtube_id: 2GTqDo9bbOM
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/for-of-loop-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/October/580fb160_for-of-loop-animation-new/hls/playlist.m3u8'
      - id: 373643
        key: 9b85051a-1082-4706-be9a-994a46b433ca
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:13 GMT+0000 (UTC)'
        is_public: true
        text: |-
          但是等等，还有更多优势！for...of 循环还具有其他优势，解决了 for 和 for...in 循环的不知之处。

          你可以随时停止或退出 for...of 循环。

          ```js
          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const digit of digits) {
            if (digit % 2 === 0) {
              continue;
            }
            console.log(digit);
          }
          ```
          > **Prints:**<br>
          1<br>
          3<br>
          5<br>
          7<br> 
          9

          不用担心向对象中添加新的属性。for...of 循环将只循环访问对象中的值。

          ```js
          Array.prototype.decimalfy = function() {
            for (i = 0; i < this.length; i++) {
              this[i] = this[i].toFixed(2);
            }
          };

          const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

          for (const digit of digits) {
            console.log(digit);
          }
          ```
          > **Prints:**<br>
          0<br>
          1<br>
          2<br>
          3<br>
          4<br>
          5<br>
          6<br>
          7<br>
          8<br> 
          9
        instructor_notes: ''
        resources: null
  - id: 373667
    key: 60509a69-3474-45e9-bca5-f3439b6c9cab
    locale: zh-cn
    version: 1.0.0
    title: 测验：编写 For...of 循环 (1-4)
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:19 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373644
      - 373645
      - 373646
    atoms:
      - id: 373644
        key: 571317d9-a4a2-4973-a2e3-18ccf4043f29
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:14 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 指导说明：

          编写符合以下条件的 `for...of` 循环：

          * 循环访问 `days` 数组中的每一天
          * 将一天的首字母大写
          * 将这一天输出到控制台中
        instructor_notes: ''
        resources: null
      - id: 373645
        key: 9ac77835-a76f-4a74-ba22-b8d989aae770
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:14 GMT+0000 (UTC)'
        is_public: true
        text: |-
          代码应该将以下每天输出到控制台中：

          > Sunday<br>
          > Monday<br>
          > Tuesday<br>
          > Wednesday<br>
          >Thursday<br>
          >Friday<br>
          >Saturday 

          ## 你的代码：
        instructor_notes: ''
        resources: null
      - id: 373646
        key: d131c711-b8de-4798-ade4-eed84f3e75c8
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Mon Sep 11 2017 16:05:17 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '4944563459457024'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var daysSelector = esquery.parse('[id.name="days"]');
                          // query AST with selector
                          var daysMatch = esquery.match(tree, daysSelector);
                          describe('Your code', function() {
                              // check if days exists
                              it('should have a variable `days`', function() {
                                  assert.isDefined(days, 'The variable `days` doesn\'t exist');
                              });
                          });
                          if(daysMatch[0] !== null) {
                              describe('Your variable `days`', function() {
                                  it('should be an array', function() {
                                      assert.isArray(days, 'The variable `days` isn\'t an array');
                                  });
                                  it('should contain the days of the week', function() {
                                      var length = days.length;
                                      var check = days.includes('sunday') && days.includes('monday') && days.includes('tuesday') && days.includes('wednesday') && days.includes('thursday') && days.includes('friday') && days.includes('saturday') && length === 7;
                                      assert.equal(check, true, 'Your `days` array should only contain the days of the week');
                                  });
                              });
                              // define selector
                              var forOfSelector = esquery.parse('ForOfStatement');
                              // query AST with selector
                              var forOfMatch = esquery.match(tree, forOfSelector);
                              if(forOfMatch[0] !== null) {
                                  describe('Your for...of loop', function() {
                                      it('should initialize a variable to keep up with individual days in the loop', function() {
                                          const declarationSelector = esquery.parse('VariableDeclaration');
                                          const declarationMatch = esquery.match(forOfMatch[0], declarationSelector);

                                          assert.equal(declarationMatch.length, 1, 'Your for...of loop is missing a variable to keep up with the individual days in the loop');
                                      });

                                      it('should loop through the `days` array', function() {
                                          const loopOverDays = forOfMatch[0] && forOfMatch[0].right && forOfMatch[0].right.name;

                                          assert.equal(loopOverDays, 'days', "Your for...of loop doesn't loop through the `days` array");
                                      });

                                      it('should print each day capitalized to the console', function() {
                                          const expectedOutput = 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday';

                                          assert.equal(logMessages.toString(), expectedOutput, 'Your for...of loop should capitalize each day and print it to the console');
                                      });
                                  });
                              } else {
                                  describe('Your code', function() {
                                      // check if using a for...of loop
                                      it('should use a for...of loops', function() {
                                          assert.isOk(false, 'Your code is not using a for...of loop');
                                      });
                                  });
                              }
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());






                  /* *** James Parkes' Code *** */
                  // // tests to verify the student's code
                  // ;(function() {
                  //     // require assertion library, javascript parser, querying library, and file system
                  //     var chai = require('chai');
                  //     var esprima = require('esprima');
                  //     var esquery = require('esquery');
                  //     var fs = require('fs');

                  //     var assert = chai.assert;
                  //     var tree = '';
                  //     var content = '';

                  //     // get students' file
                  //     content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                  //     // generate abstract systax tree (AST)
                  //     tree = esprima.parse(content);

                  //     // define selector
                  //     var bodySelector = esquery.parse('[body]');
                  //     // query AST with selector
                  //     var bodyMatch = esquery.match(tree, bodySelector);

                  //     // tests
                  //     if(bodyMatch[0].body.length !== 0) {
                  //         // define selector
                  //         var daysSelector = esquery.parse('[id.name="days"]');
                  //         // query AST with selector
                  //         var daysMatch = esquery.match(tree, daysSelector);
                  //         describe('Your code', function() {
                  //             // check if days exists
                  //             it('should have a variable `days`', function() {
                  //                 assert.isDefined(days, 'The variable `days` doesn\'t exist');
                  //             });
                  //         });
                  //         if(daysMatch[0] !== null) {
                  //             describe('Your variable `days`', function() {
                  //                 it('should be an array', function() {
                  //                     assert.isArray(days, 'The variable `days` isn\'t an array');
                  //                 });
                  //                 it('should contain the days of the week', function() {
                  //                     var length = days.length;
                  //                     var check = days.includes('sunday') && days.includes('monday') && days.includes('tuesday') && days.includes('wednesday') && days.includes('thursday') && days.includes('friday') && days.includes('saturday') && length === 7;
                  //                     assert.equal(check, true, 'Your `days` array should only contain the days of the week');
                  //                 });
                  //             });
                  //             // define selector
                  //             var forOfSelector = esquery.parse('ForOfStatement');
                  //             // query AST with selector
                  //             var forOfMatch = esquery.match(tree, forOfSelector);
                  //             if(forOfMatch[0] !== null) {
                  //                 describe('Your for...of loop', function() {
                  //                     // check if variable is created for loop
                  //                     it('should initialize a variable to keep up with individual days in the loop', function() {
                  //                         // define selector
                  //                         var declarationSelector = esquery.parse('VariableDeclaration');
                  //                         // query AST with selector
                  //                         var declarationMatch = esquery.match(forOfMatch[0], declarationSelector);
                  //                         assert.equal(declarationMatch.length, 1, 'Your for...of loop is missing a variable to keep up with the individual days in the loop');
                  //                     });
                  //                     // check if looping through days
                  //                     it('should loop through the `days` array', function() {
                  //                         assert.equal(forOfMatch[0].right.name, 'days', 'Your for...of loop doesn\'t loop through the `days` array');
                  //                     });
                  //                     //check if days are capitalized and printed to the console
                  //                     it('should print each day capitalized to the console', function() {
                  //                         var expectedOutput = 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday';
                  //                         assert.equal(logMessages.toString(), expectedOutput, 'Your for...of loop should capitalize each day and print it to the console');
                  //                     });
                  //                 });
                  //             } else {
                  //                 describe('Your code', function() {
                  //                     // check if using a for...of loop
                  //                     it('should use a for...of loops', function() {
                  //                         assert.isOk(false, 'Your code is not using a for...of loop');
                  //                     });
                  //                 });
                  //             }
                  //         }
                  //     } else {
                  //         describe('Your code', function() {
                  //             it('should not be empty', function() {
                  //                 assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                  //             });
                  //         });
                  //     }

                  // }());
                name: SwizzleAfter.js
        answer: null
  - id: 373669
    key: 398d36e6-3393-4c50-b870-44a4dffb0ac4
    locale: zh-cn
    version: 1.0.0
    title: 展开... 运算符
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:24 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373647
      - 373648
      - 373649
    atoms:
      - id: 373647
        key: 60de06e8-d63e-4a68-8dfd-51ba01f50d69
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 18 2017 07:08:28 GMT+0000 (UTC)'
        is_public: true
        text: |-
          现在该换另一个工具，看看展开运算符了！!

          ## 展开运算符

          **展开运算符**（用三个连续的点 ( `...` ) 表示）是 ES6 中的新概念，使你能够将[字面量对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators#迭代器)展开为多个元素。

          我们通过几个示例看看它的原理。

          ```js
          const books = ["Don Quixote", "The Hobbit", "Alice in Wonderland", "Tale of Two Cities"];
          console.log(...books);
          ```
          > **Prints:** Don Quixote The Hobbit Alice in Wonderland Tale of Two Cities

          ```js
          const primes = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]);
          console.log(...primes);
          ```
          > **Prints:** 2 3 5 7 11 13 17 19 23 29

          如果查看上述示例的输出，会发现数组和集合都扩展开了单个元素。这有什么用？

          > **注意：**集合是 ES6 中的全新内置对象。我们将在第 3 节课详细讲解**集合**。
        instructor_notes: ''
        resources: null
      - id: 373648
        key: 3682d4ab-8a31-4eb7-9acd-5fc0f9377217
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:20 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### 使用 concat 方法结合数组

          展开运算符的一个用途是结合数组。

          如果你需要结合多个数组，在有展开运算符之前，必须使用 Array 的 `concat()` 方法。

          ```js
          const fruits = ["apples", "bananas", "pears"];
          const vegetables = ["corn", "potatoes", "carrots"];
          const produce = fruits.concat(vegetables);
          console.log(produce);
          ```
          > **Prints:** ["apples", "bananas", "pears", "corn", "potatoes", "carrots"]

          并不算太糟糕，但是如果有简写方法，会不会更好？

          例如，如下所示…

          > ### ⚠️ 接下来会出现 `const` 警告 ⚠️
          > 如果你通过复制/粘贴代码跟着操作，那么你已经使用 `const` 关键字声明了 `produce` 变量。以下代码将尝试重新声明变量并对其重新赋值，因此可能会出现错误，取决于你运行代码的方式。
          > 
          > 注意，使用 `const` 声明的变量不能在同一作用域内重新声明或重新赋值。

          ```js
          const produce = [fruits, vegetables];
          console.log(produce);
          ```
          > **Prints:** [Array[3], Array[3]]

          遗憾的是，不可行。

          这段代码实际上将 `fruits` 数组添加到 `produce` 数组的第一个索引处，将 `vegetables` 数组添加到第二个索引处。

          要不尝试下展开运算符？
        instructor_notes: ''
        resources: null
      - id: 373649
        key: c837f4dc-f9d8-4395-a91d-50be1383d858
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Mon Sep 11 2017 16:05:23 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5318067334807552'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var fruitsSelector = esquery.parse('[id.name="fruits"]');
                          var vegetablesSelector = esquery.parse('[id.name="vegetables"]');
                          var produceSelector = esquery.parse('[id.name="produce"]');
                          // query AST with selector
                          var fruitsMatch = esquery.match(tree, fruitsSelector);
                          var vegetablesMatch = esquery.match(tree, vegetablesSelector);
                          var produceMatch = esquery.match(tree, produceSelector);
                          describe('Your code', function() {
                              // check if fruits exists
                              it('should have a variable `fruits`', function() {
                                  assert.isDefined(fruits, "The variable `fruits` doesn't exist");
                              });
                              // check if vegetables exists
                              it('should have a variable `vegetables`', function() {
                                  assert.isDefined(vegetables, "The variable `vegetables` doesn't exist");
                              });
                              // check if produce exists
                              it('should have a variable `produce`', function() {
                                  assert.isDefined(produce, "The variable `produce` doesn't exist");
                              });
                          });
                          if(fruitsMatch[0] !== null && vegetablesMatch[0] !== null && produceMatch[0] !== null) {
                              describe('Your variable `produce`', function() {
                                  // check if produce is an array
                                  it('should be an array', function() {
                                      assert.isArray(produce, 'Your variable `produce` isn\'t an array');
                                  });
                                  // check if produce contains values from fruits array
                                  it('should contain the values from the `fruits` array', function() {
                                      var check1 = produce.includes("apples");
                                      var check2 = produce.includes("bananas");
                                      var check3 = produce.includes("pears");
                                      assert.equal(check1 && check2 && check3, true, 'Your variable `produce` doesn\'t contain the values from the `fruits` array');
                                  });
                                  // check if produce contains values from vegetables array
                                  it('should contain the values from the `vegetables` array', function() {
                                      var check1 = produce.includes("corn");
                                      var check2 = produce.includes("potatoes");
                                      var check3 = produce.includes("carrots");
                                      assert.equal(check1 && check2 && check3, true, 'Your variable `produce` doesn\'t contain the values from the `vegetables` array');
                                  });
                              });
                              describe('Your code', function() {
                                  // check if produce is initialized using spread operators
                                  it('should use spread operator to combine the `fruits` and `vegetables` arrays into the `produce` array', function() {
                                      // define selector
                                      var spreadSelector = esquery.parse('SpreadElement');
                                      // query AST with selector
                                      var spreadMatch = esquery.match(produceMatch[0], spreadSelector);
                                      if(spreadMatch[0] !== null) {
                                          if(spreadMatch.length === 2) {
                                              assert.equal(spreadMatch[0].argument.name, 'fruits', 'Your code doesn\'t _spread_ the fruits array');
                                              assert.equal(spreadMatch[1].argument.name, 'vegetables', 'Your code doesn\'t _spread_ the vegetables array');
                                          } else {
                                              assert.isOk(false, 'Your code should use the spread operator twice');
                                          }
                                      } else {
                                          assert.isOk(false, 'Your code doesn\'t use the spread operator');
                                      }
                                  });
                              });
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 373670
    key: 59aad850-4429-42b8-a9e8-f4a7dded102f
    locale: zh-cn
    version: 1.0.0
    title: ...剩余参数
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:26 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373650
      - 373651
      - 373653
    atoms:
      - id: 373650
        key: d6d298b9-f83b-41b1-aa46-5a4c6a5dafe5
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:25 GMT+0000 (UTC)'
        is_public: true
        text: |-
          如果你可以使用展开运算符将数组展开为多个元素，那么肯定有一种方式将多个元素绑定到一个数组中吧？

          实际上，的确有！叫做_剩余参数_，它是 ES6 中新加的另一个运算符。

          ## 剩余参数

          **剩余参数**也用三个连续的点 ( `...` ) 表示，使你能够将不定数量的元素表示为数组。它在多种情形下都比较有用。

          一种情形是将变量赋数组值时。例如，

          ```js
          const order = [20.17, 18.67, 1.50, "cheese", "eggs", "milk", "bread"];
          const [total, subtotal, tax, ...items] = order;
          console.log(total, subtotal, tax, items);
          ```
          > **Prints:** 20.17 18.67 1.5 ["cheese", "eggs", "milk", "bread"]

          该代码将 `order` 数组的值分配给单个变量。数组中的前三个值被分配给了 `total`、`subtotal` 和 `tax`，但是需要重点注意的是 `items`。

          通过使用剩余参数，数组中剩余的值（作为数组）被分配给了 `items`。
        instructor_notes: ''
        resources: null
      - id: 373651
        key: de0260f8-3acf-4cc8-ab2c-616f2a50efbf
        locale: zh-cn
        version: 1.0.0
        title: 展开运算符和剩余参数动画
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:05:25 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">可以将剩余参数看着展开运算符的对立面；如果展开运算符是拿出包装盒中的所有物品，那么剩余参数就是将所有物品放回包装盒中。</div>'
        resources: null
        video:
          id: '54461'
          youtube_id: vRtfwfqnVSs
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/ud356-l1-spread-rest-animation_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/59012fe4_ud356-l1-spread-rest-animation/hls/playlist.m3u8'
      - id: 373653
        key: 37eaeb3f-194b-4317-9afd-9bcea6a4f671
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 18 2017 08:14:43 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 可变参数函数

          剩余参数的另一个用例是处理可变参数函数。**可变参数函数**是接受不定数量参数的函数。

          例如，假设有一个叫做 `sum()` 的函数，它会计算不定数量的数字的和。在运行期间，如何调用 `sum()` 函数？

          ```js
          sum(1, 2);
          sum(10, 36, 7, 84, 90, 110);
          sum(-23, 3000, 575000);
          ```

          实际上有无数种方式可以调用 `sum()` 函数。不管传入函数的数字有多少个，应该始终返回数字的总和。

          ### 使用参数对象

          在之前版本的 JavaScript 中，可以使用[参数对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)处理这种类型的函数。**参数对象**是像数组一样的对象，可以当做本地变量在所有函数中使用。它针对传入函数的每个参数都包含一个值，第一个参数从 0 开始，第二个参数为 1，以此类推。

          如果我们看看 `sum()` 函数的实现方法，会发现可以使用参数对象来处理传递给它的各种数字。

          ```js
          function sum() {
            let total = 0;  
            for(const argument of arguments) {
              total += argument;
            }
            return total;
          }
          ```

          现在可以正常运行，但是存在问题：

          1. 如果查看 `sum()` 函数的定义，会发现它没有任何参数。
            * 这容易引起误导，因为我们知道 `sum()` 函数可以处理不定数量的参数。
          2. 难以理解。
            * 如果你从未使用过参数对象，那么看了这段代码后很可能会疑问参数对象来自何处。是不是凭空出现的？看起来肯定是这样。

          ### 使用剩余参数

          幸运的是，出现剩余参数后，你可以重写 `sum()` 函数，使其阅读起来更清晰。

          ```js
          function sum(...nums) {
            let total = 0;  
            for(const num of nums) {
              total += num;
            }
            return total;
          }
          ```

          这一版本的 `sum()` 函数**更简练**、**更易读懂**。此外，注意 `for...in` 循环被替换成了新的 **for...of 循环**。
        instructor_notes: ''
        resources: null
  - id: 373672
    key: 6a6c5deb-2f06-4cd7-afab-222716634f10
    locale: zh-cn
    version: 1.0.0
    title: 测验：使用剩余参数 (1-5)
    semantic_type: Concept
    updated_at: 'Mon Sep 11 2017 16:05:32 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373654
      - 373655
    atoms:
      - id: 373654
        key: 7de8342b-002c-4a18-93e1-29109c0e045e
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Sep 11 2017 16:05:27 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## 指导说明：

          使用剩余参数创建一个 `average()` 函数，该函数会计算不定数量的数字的平均值。

          > **提示：**确保使用不同的值测试代码。例如，<br><br>
          > `average(2, 6)` 应该返回 `4`<br>
          > `average(2, 3, 3, 5, 7, 10)` 应该返回 `5`<br>
          > `average(7, 1432, 12, 13, 100)` 应该返回 `312.8`<br>
          > `average()` 应该返回 `0`

          ## 你的代码：
        instructor_notes: ''
        resources: null
      - id: 373655
        key: a133cf22-53e1-46d5-95f4-3bfd4bd53bf6
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Mon Sep 11 2017 16:05:30 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5747611345747968'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var averageSelector = esquery.parse('[id.name="average"]');
                          // query AST with selector
                          var averageMatch = esquery.match(tree, averageSelector);
                          describe('Your code', function() {
                              // check if average exists
                              it('should have a function `average()`', function() {
                                  assert.isFunction(average, "The function `average()` doesn't exist");
                              });
                          });
                          if(averageMatch[0] !== null) {
                              describe('Your `average()` function', function() {
                                  // define selector
                                  var restSelector = esquery.parse('RestElement');
                                  // query AST with selector
                                  var restMatch = esquery.match(averageMatch[0], restSelector);
                                  it('should have one parameter', function() {
                                      assert.equal(averageMatch[0].params.length, 1, 'Your `average()` function should only have one parameter');
                                  });
                                  it('should use the rest parameter', function() {
                                      if(restMatch[0] !== null) {
                                          assert.equal(restMatch.length, 1, 'Your `average()` function doesn\'t use the rest parameter');
                                      } else {
                                          assert.isOk(false, 'Your `average()` function doesn\'t use the rest parameter');
                                      }
                                  });
                                  it('should calculate the average of an indefinite amount of numbers', function() {
                                      var answer1 = average(2, 6);
                                      var check1 = 4 === answer1;
                                      var answer2 = average(2, 3, 3, 5, 7, 10);
                                      var check2 = 5 === answer2;
                                      var answer3 = average(7, 1432, 12, 13, 100);
                                      var check3 = 312.8 === answer3;
                                      var answer4 = average();
                                      var check4 = 0 === answer4;
                                      assert.equal(check1 && check2 && check3 && check4, true, 'Your `average()` function doesn\'t calculate average correctly');
                                  });
                              });
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 373673
    key: bd715feb-2540-4f45-9144-8bd6b708f0cd
    locale: zh-cn
    version: 1.0.0
    title: 第 1 节课总结
    semantic_type: Concept
    updated_at: 'Thu Sep 28 2017 04:23:19 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 373656
    atoms:
      - id: 373656
        key: 16372722-3bd4-479c-bf55-5ea1ab173dbc
        locale: zh-cn
        version: 1.0.0
        title: 第 1 节课总结
        semantic_type: VideoAtom
        updated_at: 'Mon Sep 11 2017 16:05:33 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43128'
          youtube_id: EG4B0JEkLzk
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f77be_55-outro/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/55-outro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f77be_55-outro/hls/playlist.m3u8'
