id: 298450
key: ceb0042f-3e00-4bd2-a1d4-7746ec9c138a
locale: en-us
version: 1.0.0
title: Render UI with External Data
semantic_type: Lesson
updated_at: 'Mon Sep 25 2017 21:38:14 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/June/595195a0_2-4-render-ui-with-external-data2x/2-4-render-ui-with-external-data2x.jpg'
  width: 592
  height: 640
video: null
summary: You'll learn where to fetch remote data in a React application. You'll also learn about the different lifecycle hooks and how to use them.
lesson_type: Classroom
duration: 60
is_project_lesson: false
career_portal_experience_levels: []
_concepts_ids:
  - 328683
  - 328684
  - 331521
_project_id: null
concepts:
  - id: 328683
    key: 6449df33-b354-46ec-b3b5-3dc149dc37ed
    locale: en-us
    version: 1.0.0
    title: Introduction
    semantic_type: Concept
    updated_at: 'Tue Jun 27 2017 15:45:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 340412
      - 331517
      - 331499
    atoms:
      - id: 340412
        key: 427a2e87-c84e-4942-afaf-b68692cffc2c
        locale: en-us
        version: 1.0.0
        title: Conceptualize the Lifecycle of a Component
        semantic_type: VideoAtom
        updated_at: 'Thu Aug 17 2017 17:48:58 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '59033'
          youtube_id: 5UbhHLY25iY
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/01-conceptualize-the-lifecycle-of-a-component_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/59520a56_01-conceptualize-the-lifecycle-of-a-component/hls/playlist.m3u8'
      - id: 331517
        key: dde24f14-3d8f-4bef-91e5-71da883da18d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Jun 19 2017 21:47:25 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## `render()` Is For Rendering, Only!
           
          I just mentioned this in the video, but I want to stress it again - **data should not be fetched in the `render` method**! A component's `render()` method should _only_ be used to render that component; it should not make any HTTP requests, fetch data that's used to display the content, or alter the DOM. The `render()` method also shouldn't call any other functions that do any of these things, either. 
           
          So if `render()` is only used for displaying content, we put the code that _should_ handle things like Ajax requests in what React calls **lifecycle events**.
        instructor_notes: ''
        resources: null
      - id: 331499
        key: 8c7c2412-b378-4967-9d72-182615417f14
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Jun 21 2017 18:38:33 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## Lifecycle Events
           
          Lifecycle events are specially named methods in a component. These methods are automatically bound to the component instance, and React will call these methods naturally at certain times during the life of a component. There are a number of different lifecycle events, but here are the most commonly used ones.
           
          * `componentWillMount()`
           
              > invoked immediately _before_ the component is _inserted_ into the DOM
           
          * `componentDidMount()`
           
              > invoked immediately _after_ the component is _inserted_ into the DOM
           
          * `componentWillUnmount()`
           
              > invoked immediately _before_ a component is _removed_ from the DOM
           
          * `componentWillReceiveProps()`
           
              > invoked whenever the component is about to receive brand new props
           
          To use one of these, you'd just create a method in your component with the name and React will call it. It's an easy way to hook into different parts of the lifecycle of React components.
           
          The lifecycle event that we'll be looking at (and will be using a lot in our app!) is the `componentDidMount()` lifecycle event.
        instructor_notes: ''
        resources: null
  - id: 328684
    key: 0147fcd7-284c-4d98-bfb6-baa843a52cd2
    locale: en-us
    version: 1.0.0
    title: componentDidMount Lifecycle Event
    semantic_type: Concept
    updated_at: 'Tue Jun 27 2017 16:43:06 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 331373
      - 331549
      - 331555
      - 331374
      - 340250
      - 340290
      - 340291
      - 331559
      - 332962
      - 331377
      - 340251
      - 340426
      - 331560
      - 332966
    atoms:
      - id: 331373
        key: 61adcaae-087c-48ad-82a4-35fbb5aaa165
        locale: en-us
        version: 1.0.0
        title: The componentDidMount() Lifecycle Event
        semantic_type: VideoAtom
        updated_at: 'Thu Aug 17 2017 17:49:09 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '58033'
          youtube_id: r4mMii8NTAQ
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/593c903b_02-use-componentdidmount/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/02-use-componentdidmount_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c903b_02-use-componentdidmount/hls/playlist.m3u8'
      - id: 331549
        key: 328e851f-d3c0-4343-88d1-6d0eccf3d0a3
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Jun 21 2017 18:46:21 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## How `componentDidMount()` Works
           
          If you remember from the previous section, `componentDidMount()` is the lifecycle hook that is run right after the component is added to the DOM and should be used if you're fetching remote data or doing an Ajax request. Here's what the React docs have to say about it:
           
          > `componentDidMount()` is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request. Setting state in this method will trigger a re-rendering.
           
          Let's take a look at an example User component:
           
          ```js
          import React, { Component } from 'react';
          import fetchUser from '../utils/UserAPI';
           
          class User extends Component {
            constructor(props) {
              super(props)
           
              this.state = {
                name: '',
                age: ''
              }
            }
           
            componentDidMount() {
              fetchUser().then((user) => this.setState({
                name: user.name,
                age: user.age
              }))
            }
           
            render() {
              return (
                <div>
                  <p>Name: {this.state.name}</p>
                  <p>Age: {this.state.age}</p>
                </div>
              )
            }
          }
           
          export default User;
          ```
           
          You'll notice that this component has a `componentDidMount()` lifecycle event. This component seems pretty straightforward, but let's walk through the order of how it works:
           
          1. The `render()` method is called which updates the page with a `<div>` that has one paragraph for the name and one paragraph for the age. What's important to realize is that `this.state.name` and `this.state.age` are empty strings (at first), so the name and age _don't actually display_
          * Once the component has been mounted, the `componentDidMount()` lifecycle event occurs
            - The `fetchUser` request from the `UserAPI` is run which sends a request to the user database
            - When the data is returned, `setState()` is called and updates the `name` and `age` properties
          * Since the state has changed, `render()` gets called again. This re-renders the page, but now `this.state.name` and `this.state.age` have values
           
          Let's use `componentDidMount()` to fetch real users from a server in our Contacts app! 
        instructor_notes: ''
        resources: null
      - id: 331555
        key: 19bbb836-e43f-4bab-9b3e-c69139167d7e
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Jun 26 2017 23:04:40 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ## ⚠️ Required API File ⚠️ 

          > At the beginning of the program, we gave you the option to clone our starter project or to start from scratch using [create-react-app](https://github.com/facebookincubator/create-react-app). If you used create-react-app to build your project, then you'll need [the ContactsAPI file](https://github.com/udacity/reactnd-contacts-complete/blob/master/src/utils/ContactsAPI.js) for the following video.
        instructor_notes: ''
        resources: null
      - id: 331374
        key: 3988e134-6f2c-4da9-bbc7-56486f91dba9
        locale: en-us
        version: 1.0.0
        title: Use API to Fetch Remote Contacts
        semantic_type: VideoAtom
        updated_at: 'Thu Aug 17 2017 17:49:15 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '58034'
          youtube_id: DoDbW-DlwlI
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/04-use-api-to-fetch-remote-contacts_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9045_04-use-api-to-fetch-remote-contacts/hls/playlist.m3u8'
      - id: 340250
        key: 17e8f04f-e9b9-4e4e-92dc-2810b04b4530
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Jun 26 2017 23:06:02 GMT+0000 (UTC)'
        is_public: true
        text: '[Here''s the commit with the changes made in this video.](https://github.com/udacity/reactnd-contacts-complete/commit/2f165b6f1c95092722486249b00cb172bcf1d3ab)'
        instructor_notes: ''
        resources: null
      - id: 340290
        key: 51225cff-6a89-49f2-9ab8-c545719370f9
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Jun 27 2017 16:40:03 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: In which lifecycle method should you make Ajax/API requests?
          correct_feedback: Ajax requests should *only* be made in the componentDidMount lifecycle method.
          video_feedback: null
          default_feedback: What is this section's title? ;-)
          answers:
            - id: a1498526500512
              text: componentDidMount
              is_correct: true
              incorrect_feedback: null
            - id: a1498526516058
              text: componentWillmount
              is_correct: false
              incorrect_feedback: null
            - id: a1498526520063
              text: render
              is_correct: false
              incorrect_feedback: null
            - id: a1498526522762
              text: shouldComponentUpdate
              is_correct: false
              incorrect_feedback: null
      - id: 340291
        key: 3f60284c-9df3-4646-83b6-00641c17052f
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue Jun 27 2017 16:38:49 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Why shouldn't you make Ajax requests in the render method?
          correct_feedback: 'The render method should take in input via props, and return a description of your UI (JSX), nothing else.'
          video_feedback: null
          default_feedback: 'Remember that `render()` should not alter the data. If it should only display content, which one of these options should you pick?'
          answers:
            - id: a1498526603237
              text: the render method should be a "pure function"
              is_correct: true
              incorrect_feedback: null
            - id: a1498526617568
              text: render doesn't support normal JavaScript
              is_correct: false
              incorrect_feedback: null
            - id: a1498526667416
              text: You don't have complete control over when the render method will be invoked
              is_correct: true
              incorrect_feedback: null
            - id: a1498526760567
              text: You can't invoke functions inside of the render method
              is_correct: false
              incorrect_feedback: null
      - id: 331559
        key: 0a6e158f-cc7b-4a79-ab11-d53a7ac93cc6
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Mon Jun 19 2017 21:20:15 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - I have set `this.state.contacts` to an empty array in `App.js`
          - I have imported the `ContactsAPI.js` file in `App.js`
          - I have added the `componentDidMount` lifecycle event to `App.js`
          - '`componentDidMount` updates `this.state.contacts` with users returned from Contacts API''s `getAll()` method'
        positive_feedback: Great work!
        video_feedback: null
        description: ''
      - id: 332962
        key: 4f89596a-c15e-459f-b390-f55d1ae9578f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Jun 19 2017 21:28:35 GMT+0000 (UTC)'
        is_public: true
        text: |
          Awesome work! Using `componentDidMount` is actually pretty easy, isn't it?
           
          ## Remove Contacts
           
          With what we have so far, we're fetching all users from the Contacts API and adding them to `this.state.contacts`. Pretty good so far. What's missing, though, is the removing feature. Currently, when we remove a contact, it gets removed from `this.state.contacts`, but it still exists in the backend database. 
           
          Let's use the Contacts API's `remove()` method to update the backend. 
        instructor_notes: ''
        resources: null
      - id: 331377
        key: 2d727445-729d-46dc-9c96-c693010f01d1
        locale: en-us
        version: 1.0.0
        title: Remove Contacts
        semantic_type: VideoAtom
        updated_at: 'Thu Aug 17 2017 17:49:25 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '58035'
          youtube_id: vHj2BqAW7jA
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/593c9048_05-remove-contacts/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/05-remove-contacts_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593c9048_05-remove-contacts/hls/playlist.m3u8'
      - id: 340251
        key: cb66e6a8-2af1-4390-8512-60d6337b31dc
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Jun 26 2017 23:07:32 GMT+0000 (UTC)'
        is_public: true
        text: '[Here''s the commit with the changes made in this video.](https://github.com/udacity/reactnd-contacts-complete/commit/151ea430aea71230811cd395ee08398df9b8f170)'
        instructor_notes: ''
        resources: null
      - id: 340426
        key: 51b4e867-51cb-4757-b4d1-5d6fa02598db
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jun 27 2017 16:43:06 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ## Lost All Your Contacts?

          > Now that we're syncing our contacts back to the server, any delete commands will remove all of them. Since we aren't able to add new ones yet, you'll be kinda stuck if you delete all of them.

          > To get the default list of contacts back, just restart your _backend_ server. That's the backend server, _not_ the Contacts app, itself.
        instructor_notes: ''
        resources: null
      - id: 331560
        key: 30cd37a8-a4ed-4ff6-9444-df1d33d8b884
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Mon Jun 19 2017 21:18:55 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - My code makes a call to the Contacts API's `.remove()` method from inside `removeContact()` in `App.js`
        positive_feedback: Great work!
        video_feedback: null
        description: ''
      - id: 332966
        key: bb1a53cd-34ff-40ad-bb31-03bae43b12ac
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Jun 19 2017 21:44:14 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## `componentDidMount()` Recap
           
          `componentDidMount()` is one of a number of lifecycle events that React offers. `componentDidMount()` gets called after the component is "mounted" (which means after it is rendered). If you need to dynamically fetch data or run an Ajax request, you should do it in `componentDidMount()`.
           
          ### Further Research
           
          * [`componentDidMount()`](https://facebook.github.io/react/docs/react-component.html#componentdidmount) from the React Docs
        instructor_notes: ''
        resources: null
  - id: 331521
    key: 3612061d-6488-454c-9818-cc6bcba02f5e
    locale: en-us
    version: 1.0.0
    title: Lesson summary
    semantic_type: Concept
    updated_at: 'Mon Sep 25 2017 23:41:50 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 331544
      - 340268
      - 331546
    atoms:
      - id: 331544
        key: 458b37f5-1476-4cd1-8aff-8a460a540c3d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Jun 21 2017 20:44:41 GMT+0000 (UTC)'
        is_public: true
        text: |
          To recap, lifecycle events are special methods that React provides that allow us to hook into different points in a component's life to run some code. Now there are a number of different lifecycle events and they will run at different points, but we can break them down into three distinct categories:
           
          ### Adding to the DOM
          These lifecycle events are called when a component is being added to the DOM:
          * `constructor()`
          * `componentWillMount()`
          * `render()`
          * `componentDidMount()`
           
          ### Re-rendering
          These lifecycle events are called when a component is re-rendered to the DOM
          * `componentWillReceiveProps()`
          * `shouldComponentUpdate()`
          * `componentWillUpdate()`
          * `render()`
          * `componentDidUpdate()`

          ### Removing from the DOM
          This lifecycle event is called when a component is being removed from the DOM
          * `componentWillUnmount()`
           
          It's easier to tell where all of these fit together with the following graphic: 
        instructor_notes: ''
        resources: null
      - id: 340268
        key: 3d95e8be-aab5-41db-8465-e0a66660c508
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Jun 26 2017 23:58:44 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/June/59519fa9_nd019-c1-l4-lifecycle-events/nd019-c1-l4-lifecycle-events.png'
        width: 1558
        height: 1270
        alt: null
        caption: _The React Lifecycle Events listed out where they fall in a component's life._
        resources: null
        instructor_notes: null
      - id: 331546
        key: 7cebc202-aff2-4dd4-b90c-8a579f6cdf7d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Jun 29 2017 17:30:22 GMT+0000 (UTC)'
        is_public: true
        text: |
          Starting from the top left of the image, everything starts when ReactDOM renders the component.
           
          As you can see, between the list and this graphic there are a number of different lifecycle events. However, the most commonly used ones are `componentDidMount()`, `componentWillMount()`, `componentWillUnmount()`, and `componentWillReceiveProps()`.
           
          ### Further Research
           
          * [`componentWillMount()`](https://facebook.github.io/react/docs/react-component.html#componentwillmount) from the React Docs
          * [`componentDidMount()`](https://facebook.github.io/react/docs/react-component.html#componentdidmount) from the React Docs
          * [`componentWillUnmount()`](https://facebook.github.io/react/docs/react-component.html#componentwillunmount) from the React Docs
          * [`componentWillReceiveProps()`](https://facebook.github.io/react/docs/react-component.html#componentwillreceiveprops) from the React Docs
          * [Component Lifecycles](https://facebook.github.io/react/docs/react-component.html#the-component-lifecycle) from the React Docs
        instructor_notes: ''
        resources: null
