id: 196650
key: 3925704a-be38-4b70-8c8b-a4a812b6a309
locale: en-us
version: 1.0.0
title: Functions
semantic_type: Lesson
updated_at: 'Wed Jul 05 2017 19:32:28 GMT+0000 (UTC)'
is_public: true
image: null
video: null
summary: 'Functions are at the heart of JavaScript! With ES6, functions are getting some much-needed improvements. In this lesson, you''ll learn a number of new things including arrow functions and classes.'
lesson_type: Classroom
duration: 120
is_project_lesson: false
career_portal_experience_levels: null
_concepts_ids:
  - 213353
  - 257562
  - 257585
  - 261214
  - 196709
  - 213395
  - 257659
  - 257660
  - 257661
  - 261148
  - 261217
  - 257662
  - 213396
  - 257669
  - 213397
  - 257670
  - 261207
  - 213398
  - 261209
  - 261220
  - 196710
_project_id: null
concepts:
  - id: 213353
    key: 8e1cfa11-b537-4d12-8654-76baf56957e7
    locale: en-us
    version: 1.0.0
    title: Updates to Functions
    semantic_type: Concept
    updated_at: 'Tue Jan 17 2017 21:25:08 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232931
    atoms:
      - id: 232931
        key: 7aa1c84c-dac4-4a29-a296-01ec858319e1
        locale: en-us
        version: 1.0.0
        title: Updates to Functions
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:21:10 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43220'
          youtube_id: CCfficj6zG0
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/58422696_01-intro/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/58422696_01-intro/01-intro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/58422696_01-intro/01-intro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/58422696_01-intro/01-intro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/58422696_01-intro/01-intro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/58422696_01-intro/hls/playlist.m3u8'
  - id: 257562
    key: a85361fb-7015-41ef-a505-abf513873fbd
    locale: en-us
    version: 1.0.0
    title: Arrow Functions
    semantic_type: Concept
    updated_at: 'Tue Jan 17 2017 20:32:33 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 257568
      - 257583
      - 257597
    atoms:
      - id: 257568
        key: 3713a7db-672b-4e46-b47a-88294e273ed3
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 15:57:37 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Functions are one of the primary data structures in JavaScript; they've been around _forever_.

          ## Arrow functions

          ES6 introduces a new kind of function called the **arrow function**. Arrow functions are very similar to regular functions in behavior, but are quite different syntactically. The following code takes a list of names and converts each one to uppercase using a regular function:

          ```js
          const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(function(name) { 
            return name.toUpperCase();
          });
          ```

          The code below does the same thing _except_ instead of passing a regular function to the `map()` method, it passes an arrow function. Notice the _arrow_ in the arrow function ( `=>` ) in the code below:

          ```js
          const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(
            name => name.toUpperCase()
          );
          ```

          The only change to the code above is the code inside the `map()` method. It takes a regular function and changes it to use an arrow function.

          > **NOTE:** Not sure how `map()` works? It's a method on the Array prototype. You pass a function to it, and it calls that function once on every element in the array. It then gathers the returned values from each function call and makes a new array with those results. For more info, check out [MDN's documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).

          ## Convert a function to an arrow function

          ```js
          const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(function(name) { 
            return name.toUpperCase();
          });
          ```

          With the function above, there are only a few steps for converting the existing "normal" function into an arrow function.

          * remove the `function` keyword
          * remove the parentheses
          * remove the opening and closing curly braces
          * remove the `return` keyword
          * remove the semicolon
          * add an arrow ( `=>` ) between the parameter list and the function body
        instructor_notes: ''
        resources: null
      - id: 257583
        key: 723ebd59-04dd-489b-b0c3-e080af5ad332
        locale: en-us
        version: 1.0.0
        title: Convert a Function to an Arrow Function
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:33:39 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: '<div style="text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;">Converting a normal function into an arrow function.</div>'
        resources: null
        video:
          id: '44898'
          youtube_id: CM4j786p3Vs
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587e7ab0_arrow-functions-animation-new/arrow-functions-animation-new_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587e7ab0_arrow-functions-animation-new/arrow-functions-animation-new_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587e7ab0_arrow-functions-animation-new/arrow-functions-animation-new_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587e7ab0_arrow-functions-animation-new/arrow-functions-animation-new_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/January/587e7ab0_arrow-functions-animation-new/hls/playlist.m3u8'
      - id: 257597
        key: a099f0c8-d61c-4bb8-b37e-ea042ec2e503
        locale: en-us
        version: 1.0.0
        title: Arrow Function Quiz
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Apr 26 2017 23:50:19 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Take a look at the following code:

            ```js
            const names = ['Afghanistan', 'Aruba', 'Bahamas', 'Chile', 'Fiji', 'Gabon', 'Luxembourg', 'Nepal', 'Singapore', 'Uganda', 'Zimbabwe'];

            const longNames = names.filter(function(name) {
              return name.length > 6;
            });
            ```

            Which of the following choices does the same thing, but replaces `.filter()`'s function with an arrow function?
          correct_feedback: This arrow function returns country names that are six characters or longer.
          video_feedback: null
          default_feedback: |-
            There's something wrong with this choice. Can you find it? Remember the steps to convert a regular function into an arrow function:

            * remove the `function` keyword
            * remove the parentheses
            * remove the opening and closing curly braces
            * remove the `return` keyword
            * remove the semicolon
            * add an arrow ( `=>` ) between the parameter list and the function body
          answers:
            - id: a1484684437693
              text: const longNames = names.filter( function(name)  => return name.length > 6; );
              is_correct: false
              incorrect_feedback: ''
            - id: a1484684706076
              text: const longNames = names.filter( return name.length > 6 );
              is_correct: false
              incorrect_feedback: ''
            - id: a1484684706645
              text: 'const longNames = names.filter( name => {name.length > 6} );'
              is_correct: false
              incorrect_feedback: ''
            - id: a1484684707191
              text: const longNames = names.filter( name => name.length > 6 );
              is_correct: true
              incorrect_feedback: null
  - id: 257585
    key: 1bead0d5-5529-41ce-8202-eef6c8c2cad5
    locale: en-us
    version: 1.0.0
    title: Using Arrow Functions
    semantic_type: Concept
    updated_at: 'Tue Jan 17 2017 22:55:21 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 257608
      - 257618
      - 257610
      - 257639
      - 257657
    atoms:
      - id: 257608
        key: 32a55a96-247b-46b1-8470-ff3d0d936368
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 15:48:25 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Regular functions can be either **function declarations** or **function expressions**, however arrow functions are _always_ **expressions**. In fact, their full name is "arrow function expressions", so they can only be used where an expression is valid. This includes being:

          * stored in a variable,
          * passed as an argument to a function,
          * and stored in an object's property.

          One confusing syntax is when an arrow function is stored in a variable.

          ```js
          const greet = name => `Hello ${name}!`;
          ```

          In the code above, the arrow function is stored in the `greet` variable and you'd call it like this:

          ```js
          greet('Asser');
          ```
          > **Returns:** Hello Asser!

          ## Parentheses and arrow function parameteres

          You might have noticed the arrow function from the `greet()` function looks like this:

          ```js
          name => `Hello ${name}!` 
          ```

          If you recall, the parameter list appears before the arrow function's arrow (i.e. `=>`). If there's only **one** parameter in the list, then you can write it just like the example above. But, if there are **two or more** items in the parameter list, or if there are **zero** items in the list, then you need to wrap the list in parentheses:

          ```js
          // empty parameter list requires parentheses
          const sayHi = () => console.log('Hello Udacity Student!');
          sayHi();
          ```
          > **Prints:** Hello Udacity Student!

          ```js
          // multiple parameters requires parentheses
          const orderIceCream = (flavor, cone) => console.log(`Here's your ${flavor} ice cream in a ${cone} cone.`);
          orderIceCream('chocolate', 'waffle');
          ```
          > **Prints:** Here's your chocolate ice cream in a waffle cone.
        instructor_notes: ''
        resources: null
      - id: 257618
        key: 51d59567-f53f-4398-bf2a-61997fa98f5f
        locale: en-us
        version: 1.0.0
        title: Parentheses in Arrow Functions
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue Jan 17 2017 22:43:14 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Which of the following choices have correctly formatted arrow functions?
          correct_feedback: All four options are valid uses of arrow functions.
          video_feedback: null
          default_feedback: |-
            Actually, each one of these is correct. If there's no parameter to the function, you just use a pair of empty parentheses like option 1. Alternatively, some developers choose to use an underscore as their single parameter. The underscore never gets used, so it's `undefined` inside the function, but it's a common technique.

            The only difference between options 3 and 4 is the use of the parentheses around `letter`. Typically, if there's only one parameter, then no parentheses are used, but it's not wrong.
          answers:
            - id: a1484686169266
              text: 'setTimeout(() => {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(''starting the test'');<br>&nbsp;&nbsp;&nbsp;&nbsp;test.start();<br>}, 2000);'
              is_correct: true
              incorrect_feedback: null
            - id: a1484686192072
              text: 'setTimeout( _ => {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(''starting the test'');<br>&nbsp;&nbsp;&nbsp;&nbsp;test.start();<br>}, 2000);'
              is_correct: true
              incorrect_feedback: null
            - id: a1484686193023
              text: const vowels = 'aeiou'.split('');<br>const bigVowels = vowels.map( (letter) => letter.toUpperCase() );
              is_correct: true
              incorrect_feedback: null
            - id: a1484686193816
              text: const vowels = 'aeiou'.split('');<br>const bigVowels = vowels.map( letter => letter.toUpperCase() );
              is_correct: true
              incorrect_feedback: null
      - id: 257610
        key: afc3147b-fecd-4b91-8760-5f867d842881
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 15:44:32 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Concise and block body syntax

          All of the arrow functions we've been looking at have only had a single expression as the function body:

          ```js
          const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(
            name => name.toUpperCase()
          );
          ```

          This format of the function body is called the *"concise body syntax"*. The concise syntax:

          * has no curly braces surrounding the function body
          * and automatically returns the expression.

          If you need more than just a single line of code in your arrow function's body, then you can use the *"block body syntax"*.

          ```js
          const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map( name => {
            name = name.toUpperCase();
            return `${name} has ${name.length} characters in their name`;
          });
          ```

          Important things to keep in mind with the block syntax:

          * it uses curly braces to wrap the function body
          * and a `return` statement needs to be used to actually return something from the function.
        instructor_notes: ''
        resources: null
      - id: 257639
        key: e15ebe7d-9ad3-481d-9e6a-439d9cedb6c8
        locale: en-us
        version: 1.0.0
        title: Return and Curly Braces
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue Jan 17 2017 22:54:04 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'Using your knowledge of how arrow functions work with automatic returns and curly braces, which of the following choices have correctly formatted arrow functions?'
          correct_feedback: Options 1 and 4 both use correct syntax for arrow functions.
          video_feedback: null
          default_feedback: |-
            Option 1 is correct. Because the arrow function uses curly braces, there has to be a return in there somewhere for something to actually be returned.

            Option 2 is not correct because it has curly braces and no return. This function runs, but nothing gets returned to `crazyColors`.

            Option 3 doesn't have curly braces. This means it needs to be in the concise syntax and automatically return the expression so it should not have a `return` keyword, so this one isn't correct.

            Option 4 is correct. This is the most common way you'll see arrow functions written—as one-liners that automatically return.
          answers:
            - id: a1484686650389
              text: 'const colors = [''red'', ''blue'', ''green'', ''yellow'', ''orange'', ''black''];<br><br>const crazyColors = colors.map( color => {<br>&nbsp;&nbsp;&nbsp;&nbsp;const jumble = color.split('''').reverse();<br>&nbsp;&nbsp;&nbsp;&nbsp;return jumble.join('''') + ''!'';<br>});'
              is_correct: true
              incorrect_feedback: null
            - id: a1484686718784
              text: 'const colors = [''red'', ''blue'', ''green'', ''yellow'', ''orange'', ''black''];<br><br>const crazyColors = colors.map( color => {<br>&nbsp;&nbsp;&nbsp;&nbsp;color.split('''').reverse().join('''') + ''!'';<br>});'
              is_correct: false
              incorrect_feedback: null
            - id: a1484686719393
              text: 'const colors = [''red'', ''blue'', ''green'', ''yellow'', ''orange'', ''black''];<br>const crazyColors = colors.map( color => return color.split('''').reverse().join('''') + ''!'' );'
              is_correct: false
              incorrect_feedback: null
            - id: a1484686719921
              text: 'const colors = [''red'', ''blue'', ''green'', ''yellow'', ''orange'', ''black''];<br>const crazyColors = colors.map( color => color.split('''').reverse().join('''') + ''!'' );'
              is_correct: true
              incorrect_feedback: null
      - id: 257657
        key: a7d5da3b-79fb-42dd-9577-2b463e0637e7
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 17 2017 22:59:18 GMT+0000 (UTC)'
        is_public: true
        text: |
          So arrow functions are awesome!

          * The syntax is a lot shorter,
          * it's easier to write and read short, single-line functions,
          * and they automatically return when using the concise body syntax!

          > **WARNING:** Everything's not all ponies and rainbows though, and there are definitely times when you might _not_ want to use an arrow function. So before you wipe from your memory how to write a traditional function, check out these implications:

          > * there's a gotcha with the `this` keyword in arrow functions
          >  * go to the next lesson to find out the details!
          > * arrow functions are only _expressions_
          >  * there's no such thing as an arrow function declaration
        instructor_notes: ''
        resources: null
  - id: 261214
    key: 271eee24-ae2a-4fe2-981e-fd59193788be
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Convert Function into an Arrow Function (2-1)'
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 19:17:50 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261215
      - 261216
    atoms:
      - id: 261215
        key: 5e6b76f8-9a5b-459e-a133-8e59ea34a715
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 21:29:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Convert the function passed to the `map()` method into an arrow function.

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 261216
        key: 892c5160-963e-422b-a4de-78d22409eeb6
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Tue Jan 24 2017 22:02:36 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '6106030124695552'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var squaresSelector = esquery.parse('[id.name="squares"]');
                          // query AST with selector
                          var squaresMatch = esquery.match(tree, squaresSelector);
                          describe('Your code', function() {
                              // check if squares exists
                              it('should have a variable `squares`', function() {
                                  assert.isDefined(squares, 'The variable `squares` doesn\'t exist');
                              });
                          });
                          if(squaresMatch[0] !== null) {
                              describe('The variable `squares`', function() {
                                  // check if squares is an array
                                  it('should be an array', function() {
                                    assert.isArray(squares, "The variable `squares` isn't an array");
                                  });
                              });
                              // define selector
                              var arrowFuncSelector = esquery.parse('VariableDeclarator[id.name="squares"] ArrowFunctionExpression');
                              // query AST with selector
                              var arrowFuncMatch = esquery.match(tree, arrowFuncSelector);
                              if(arrowFuncMatch.length === 1) {
                                  describe('Your code', function() {
                                      it('should replace the function expression with an arrow function', function() {
                                          assert.isOk(true, 'Your code doesn\'t replace the function expression with an arrow function');
                                      });
                                  });
                                  describe('Your arrow function', function() {
                                      it('should have one parameter called `square`', function() {
                                          assert.equal(arrowFuncMatch[0].params[0].name, 'square', 'Your arrow function is missing the parameter for `square`');
                                      });
                                      it('should square each element in the `squares` array', function() {
                                          assert.sameMembers(squares, [ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ], 'Your arrow function doesn\'t square each element in the `squares` array');
                                      });
                                  });
                              } else {
                                  describe('Your code', function() {
                                      it('should replace the function expression with an arrow function', function() {
                                          assert.isOk(false, 'Your code doesn\'t replace the function expression with an arrow function');
                                      });
                                  });
                              }
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 196709
    key: 92e6caba-43ba-4089-9821-982f22069b73
    locale: en-us
    version: 1.0.0
    title: Arrow Functions Recap
    semantic_type: Concept
    updated_at: 'Tue Jan 17 2017 19:32:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232932
    atoms:
      - id: 232932
        key: e9b77df8-32ae-4cf0-8293-3f7d1451eae7
        locale: en-us
        version: 1.0.0
        title: Arrow Functions Recap
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:21:29 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43132'
          youtube_id: 8xOKUtvI1lc
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f7af7_14-arrow-functions/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7af7_14-arrow-functions/14-arrow-functions_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7af7_14-arrow-functions/14-arrow-functions_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7af7_14-arrow-functions/14-arrow-functions_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7af7_14-arrow-functions/14-arrow-functions_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7af7_14-arrow-functions/hls/playlist.m3u8'
  - id: 213395
    key: 9cf7a128-1570-4e8e-97b8-047b85a1a122
    locale: en-us
    version: 1.0.0
    title: Arrow Functions and the "this" Keyword
    semantic_type: Concept
    updated_at: 'Tue Jan 17 2017 19:38:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232933
    atoms:
      - id: 232933
        key: 0364deff-06e0-46f3-b3da-2668e3c44311
        locale: en-us
        version: 1.0.0
        title: Arrow Functions and the "this" Keyword
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:17:40 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '44131'
          youtube_id: JCDcj_tKnmY
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/585cad79_15-intro-v2/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/585cad79_15-intro-v2/15-intro-v2_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/585cad79_15-intro-v2/15-intro-v2_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/585cad79_15-intro-v2/15-intro-v2_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/585cad79_15-intro-v2/15-intro-v2_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/585cad79_15-intro-v2/hls/playlist.m3u8'
  - id: 257659
    key: 654cbc3e-5081-49e3-a17e-86198de93db6
    locale: en-us
    version: 1.0.0
    title: '"this" and Regular Functions'
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 16:03:31 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261143
      - 261144
      - 261145
    atoms:
      - id: 261143
        key: 68f23476-591b-4a15-a46b-38c744bf8eac
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 15:59:18 GMT+0000 (UTC)'
        is_public: true
        text: |-
          To get a handle on how `this` works differently with arrow functions, let's do a quick recap of how `this` works in a standard function. If you have a solid grasp of how `this` works already, feel free to [jump over this section](https://classroom.udacity.com/courses/ud356/lessons/3925704a-be38-4b70-8c8b-a4a812b6a309/concepts/32f53f68-4b31-40fb-b136-4eda28b8ff57).

          The value of the `this` keyword is based completely on how its function (or method) is called. `this` could be any of the following:

          ---

          ### 1. A new object

          If the function is called with `new`:

          ```js
          const mySundae = new Sundae('Chocolate', ['Sprinkles', 'Hot Fudge']); 
          ```

          In the code above, the value of `this` inside the `Sundae` constructor function is a new object because it was called with `new`.

          ---

          ### 2. A specified object

          If the function is invoked with `call`/`apply`:

          ```js
          const result = obj1.printName.call(obj2);
          ```

          In the code above, the value of `this` inside `printName()` will refer to `obj2` since the first parameter of `call()` is to explicitly set what `this` refers to.

          ---

          ### 3. A context object

          If the function is a method of an object:

          ```js
          data.teleport();
          ```

          In the code above, the value of `this` inside `teleport()` will refer to `data`.

          ---

          ### 4. The global object or undefined

          If the function is called with no context:

          ```js
          teleport();
          ```

          In the code above, the value of `this` inside `teleport()` is either the global object or, if in strict mode, it's `undefined`.

          ---

          > **TIP: ** `this` in JavaScript is a complicated topic. We just did a quick overview, but for an in-depth look at how `this` is determined, check out [this All Makes Sense Now!](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md) from Kyle Simpson's book series [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/master/README.md). 
        instructor_notes: ''
        resources: null
      - id: 261144
        key: 8ff05581-2c1c-4e22-838a-8d66169e631e
        locale: en-us
        version: 1.0.0
        title: '`this` and Regular Functions 1'
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Jan 24 2017 16:04:17 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            What is the value of `this` inside the `Train` constructor function below?

            ```js
            const redTrain = new Train('red');
            ```
          correct_feedback: 'Since the `new` keyword was used, the correct answer is a new object.'
          video_feedback: null
          default_feedback: Scroll to the top and look at the first section for how the value of `this` can be set.
          answers:
            - id: a1485273574059
              text: the window object
              is_correct: false
              incorrect_feedback: null
            - id: a1485273623417
              text: a new object
              is_correct: true
              incorrect_feedback: null
            - id: a1485273624416
              text: undefined
              is_correct: false
              incorrect_feedback: null
      - id: 261145
        key: 872676ca-9990-49bc-8b94-a6b0862cd792
        locale: en-us
        version: 1.0.0
        title: '`this` and Regular Functions 2'
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Jan 24 2017 16:04:25 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            What is the value of `this` inside the `increaseSpeed()` function below?

            ```js
            const redTrain = new Train('red');
            redTrain.increaseSpeed(25);
            ```
          correct_feedback: Since the `increaseSpeed()` function is called from a context object (`redTrain`) that context object will be the value of `this` in the function.
          video_feedback: null
          default_feedback: Scroll to the top and look at the third section for how the value of `this` can be set.
          answers:
            - id: a1485273749391
              text: the window object
              is_correct: false
              incorrect_feedback: null
            - id: a1485273786245
              text: a new object
              is_correct: false
              incorrect_feedback: null
            - id: a1485273787022
              text: the redTrain object
              is_correct: true
              incorrect_feedback: null
            - id: a1485273787846
              text: undefined
              is_correct: false
              incorrect_feedback: null
  - id: 257660
    key: 32f53f68-4b31-40fb-b136-4eda28b8ff57
    locale: en-us
    version: 1.0.0
    title: '"this" and Arrow Functions'
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 19:26:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261146
      - 261223
    atoms:
      - id: 261146
        key: f97df5f7-766a-46d8-add7-db6b1cd50061
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 20:26:55 GMT+0000 (UTC)'
        is_public: true
        text: |-
          With regular functions, the value of `this` is set based on _how the function is called_. With arrow functions, the value of `this` is based on _the function's surrounding context_. In other words, the value of `this` _inside_ an arrow function is the same as the value of `this` _outside_ the function.

          Let's check out an example with `this` in regular functions and then look at how arrow functions will work.

          ```js
          // constructor
          function IceCream() {
            this.scoops = 0;
          }

          // adds scoop to ice cream
          IceCream.prototype.addScoop = function() {
            setTimeout(function() {
              this.scoops++;
              console.log('scoop added!');
            }, 500);
          };

          const dessert = new IceCream();
          dessert.addScoop();
          ```
          > **Prints:**<br>
          scoop added!

          After running the code above, you'd _think_ that `dessert.scoops` would be `1` after half a millisecond. But, unfortunately, it's not:

          ```js
          console.log(dessert.scoops);
          ```

          > **Prints:**<br>
          0

          Can you tell why?

          The function passed to `setTimeout()` is called without `new`, without `call()`, without `apply()`, and without a context object. That means the value of `this` inside the function is the global object and **NOT** the `dessert` object. So what actually happened was that a new `scoops` variable was created (with a default value of `undefined`) and was then incremented (`undefined + 1` results in `NaN`):

          ```js
          console.log(scoops);
          ```

          > **Prints:**<br>
          NaN

          One way around this is to use closure:

          ```js
          // constructor
          function IceCream() {
            this.scoops = 0;
          }

          // adds scoop to ice cream
          IceCream.prototype.addScoop = function() {
            const cone = this; // sets `this` to the `cone` variable
            setTimeout(function() {
              cone.scoops++; // references the `cone` variable
              console.log('scoop added!');
            }, 0.5);
          };

          const dessert = new IceCream();
          dessert.addScoop();
          ```

          The code above _will_ work because instead of using `this` inside the function, it sets the `cone` variable to `this` and then looks up the `cone` variable when the function is called. This works because it's using the value of the `this` outside the function. So if we check the number of scoops in our dessert right now, we'll see the correct value of `1`:

          ```js
          console.log(dessert.scoops);
          ```

          > **Prints:**<br>
          1
        instructor_notes: ''
        resources: null
      - id: 261223
        key: 00501450-82a8-47d6-b531-b37b669f57d0
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 20:28:51 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Well that's exactly what arrow functions do, so let's replace the function passed to `setTimeout()` with an arrow function:

          ```js
          // constructor
          function IceCream() {
            this.scoops = 0;
          }

          // adds scoop to ice cream
          IceCream.prototype.addScoop = function() {
            setTimeout(() => { // an arrow function is passed to setTimeout
              this.scoops++;
              console.log('scoop added!');
            }, 0.5);
          };

          const dessert = new IceCream();
          dessert.addScoop();
          ```

          Since arrow functions inherit their `this` value from the surrounding context, this code works!

          ```js
          console.log(dessert.scoops);
          ```

          > **Prints:**<br>
          > 1

          When `addScoop()` is called, the value of `this` _inside_ `addScoop()` refers to `dessert`. Since an arrow function is passed to `setTimeout()`, it's using its surrounding context to determine what `this` refers to inside itself. So since `this` _outside_ of the arrow function refers to `dessert`, the value of `this` _inside_ the arrow function will also refer to `dessert`.

          Now what do you think would happen if we changed the `addScoop()` method to an arrow function?

          ```js
          // constructor
          function IceCream() {
              this.scoops = 0;
          }

          // adds scoop to ice cream
          IceCream.prototype.addScoop = () => { // addScoop is now an arrow function
            setTimeout(() => {
              this.scoops++;
              console.log('scoop added!');
            }, 0.5);
          };

          const dessert = new IceCream();
          dessert.addScoop();
          ```

          Yeah, this doesn't work for the same reason - arrow functions inherit their `this` value from their surrounding context. Outside of the `addScoop()` method, the value of `this` is the global object. So if `addScoop()` is an arrow function, the value of `this` _inside_ `addScoop()` is the global object. Which then makes the value of `this` in the function passed to `setTimeout()` _also_ set to the global object!
        instructor_notes: ''
        resources: null
  - id: 257661
    key: 2444913e-a976-4d3e-aafc-f1d60c93b23f
    locale: en-us
    version: 1.0.0
    title: Default Function Parameters
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 16:28:36 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261147
      - 261150
    atoms:
      - id: 261147
        key: 29fa3ac9-6738-4a9f-9221-9287a18f6309
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 16:51:36 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Take a look at this code:

          ```js
          function greet(name, greeting) {
            name = (typeof name !== 'undefined') ?  name : 'Student';
            greeting = (typeof greeting !== 'undefined') ?  greeting : 'Welcome';

            return `${greeting} ${name}!`;
          }

          greet(); // Welcome Student!
          greet('James'); // Welcome James!
          greet('Richard', 'Howdy'); // Howdy Richard!
          ```
          > **Returns:**<br>
          Welcome Student!<br>
          Welcome James!<br>
          Howdy Richard!

          What is all that horrible mess in the first two lines of the `greet()` function? All of that is there to provide default values for the function if the required arguments aren't provided. It's pretty ugly, though...

          Fortunately, ES6 has introduced a new way to create defaults. It's called _default function parameters_.

          ## Default function parameters

          **Default function parameters** are quite easy to read since they're placed in the function's parameter list:

          ```js
          function greet(name = 'Student', greeting = 'Welcome') {
            return `${greeting} ${name}!`;
          }

          greet(); // Welcome Student!
          greet('James'); // Welcome James!
          greet('Richard', 'Howdy'); // Howdy Richard!
          ```
          > **Returns:**<br>
          Welcome Student!<br>
          Welcome James!<br>
          Howdy Richard!

          Wow, that's a lot less code, so much cleaner, and significantly easier to read!

          To create a default parameter, you add an equal sign ( `=` ) and then whatever you want the parameter to default to if an argument is not provided. In the code above, both parameters have default values of strings, but they can be any JavaScript type!
        instructor_notes: ''
        resources: null
      - id: 261150
        key: ea46de38-b239-4e6d-be99-f0ae456a1c22
        locale: en-us
        version: 1.0.0
        title: Default Function Parameters
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Jan 24 2017 16:36:57 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Take a look at the following code:

            ```js
            function shippingLabel(name, address) {
              name = (typeof name !== 'undefined') ? name : 'Richard';
              address = (typeof address !== 'undefined') ?  address : 'Mountain View';
              return `To: ${name} In: ${address}`;
            }
            ```

            Which of the following choices is the correct way to write the `shippingLabel()` function using default function parameters?
          correct_feedback: Option 4 uses default function parameters correctly by setting the defaults directly to the parameters.
          video_feedback: null
          default_feedback: |-
            Options 1, 2, and 3 are not right, so let's go over them.

            Option 1 gives both `name` and `address` default values, but they aren't the correct default values.

            Option 2 uses an even older and more problematic way of setting default values.

            Option 3 doesn't even have default values. It just uses whatever's passed in.

            Remember that with the new default function parameters, the defaults are added directly to the parameters. Option 4 is the only one that does this correctly, so that's the right answer.
          answers:
            - id: a1485275075943
              text: 'function shippingLabel(name = '''', address = '''') {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \`To: ${name} In: ${address}\`;<br>}'
              is_correct: false
              incorrect_feedback: null
            - id: a1485275284483
              text: 'function shippingLabel(name, address) {<br>&nbsp;&nbsp;&nbsp;&nbsp;name = name || ''Richard'';<br>&nbsp;&nbsp;&nbsp;&nbsp;address = address || ''Mountain View'';<br>&nbsp;&nbsp;&nbsp;&nbsp;return \`To: ${name} In: ${address}\`;<br>}'
              is_correct: false
              incorrect_feedback: null
            - id: a1485275285034
              text: 'function shippingLabel(name, address) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \`To: ${name} In: ${address}\`;<br>}'
              is_correct: false
              incorrect_feedback: null
            - id: a1485275285538
              text: 'function shippingLabel(name = ''Richard'', address = ''Mountain View'') {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \`To: ${name} In: ${address}\`;<br>}'
              is_correct: true
              incorrect_feedback: null
  - id: 261148
    key: 5368e2c8-157b-4c15-8aa8-e06a699e9798
    locale: en-us
    version: 1.0.0
    title: Defaults and Destructuring
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 17:46:22 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261153
      - 261164
      - 261165
      - 261167
      - 261176
    atoms:
      - id: 261153
        key: 94d6c9e6-b8ff-4347-98f8-f4742ffe467a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 17:56:45 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Defaults and destructuring arrays

          You can combine default function parameters with [destructuring](https://classroom.udacity.com/courses/ud356/lessons/42383e89-ac6a-491a-b7d0-198851287bbe/concepts/7c7be588-31e9-4c62-9dad-ecf23f943b19) to create some pretty powerful functions!

          ```js
          function createGrid([width = 5, height = 5]) {
            return `Generates a ${width} x ${height} grid`;
          }

          createGrid([]); // Generates a 5 x 5 grid
          createGrid([2]); // Generates a 2 x 5 grid
          createGrid([2, 3]); // Generates a 2 x 3 grid
          createGrid([undefined, 3]); // Generates a 5 x 3 grid
          ```
          > **Returns:**<br>
          Generates a 5 x 5 grid<br>
          Generates a 2 x 5 grid<br>
          Generates a 2 x 3 grid<br>
          Generates a 5 x 3 grid

          The `createGrid()` function expects an array to be passed to it. It uses destructuring to set the first item in the array to the `width` and the second item to be the `height`. If the array is empty or if it has only one item in it, then the default parameters kick in and give the missing parameters a default value of `5`.

          There is a problem with this though, the following code will not work:

          ```js
          createGrid(); // throws an error
          ```
          > **Uncaught TypeError:** Cannot read property 'Symbol(Symbol.iterator)' of undefined

          This throws an error because `createGrid()` expects an array to be passed in that it will then destructure. Since the function was called without passing an array, it breaks. But, we can use default function parameters for this!

          ```js
          function createGrid([width = 5, height = 5] = []) {
            return `Generating a grid of ${width} by ${height}`;
          }
          ```

          See that new `= []` in the function's parameter? If `createGrid()` is called without any argument then it will use this default empty array. And since the array is empty, there's nothing to destructure into `width` and `height`, so their default values will apply! So by adding `= []` to give the entire parameter a default, the following code will now work:

          ```js
          createGrid(); // Generates a 5 x 5 grid
          ```
          > **Returns:** Generates a 5 x 5 grid
        instructor_notes: ''
        resources: null
      - id: 261164
        key: b1166f02-696c-4c0b-9c6a-0bfffafadd8d
        locale: en-us
        version: 1.0.0
        title: Destructuring with Array Defaults Parameter
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue Jan 24 2017 17:34:55 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Take a look at the following code:

            ```js
            function houseDescriptor([houseColor = 'green', shutterColors = ['red']]) {
              return `I have a ${houseColor} house with ${shutterColors.join(' and ')} shutters`;
            }
            ```

            Which of the following choices will run without throwing an error?
          correct_feedback: Options 2 and 4 are the only choices that will run correctly without throwing an error.
          video_feedback: null
          default_feedback: |-
            Since `houseDescriptor` is expecting only a single argument (an array) to be passed in, Option 1 has to be incorrect since it's calling the function with two arguments.

            Option 2 is correct.

            Option 3 does call the function with a single array argument, but the second item in the list is a string and `.join()` is not a method of strings, so the code throws an error.

            Option 4 is correct.
          answers:
            - id: a1485277080219
              text: 'houseDescriptor(''red'', [''white'', ''gray'', ''pink'']);'
              is_correct: false
              incorrect_feedback: null
            - id: a1485278612080
              text: 'houseDescriptor([''green'', [''white'', ''gray'', ''pink'']]);'
              is_correct: true
              incorrect_feedback: null
            - id: a1485278612753
              text: 'houseDescriptor([''blue'', ''purple'']);'
              is_correct: false
              incorrect_feedback: null
            - id: a1485278613201
              text: 'houseDescriptor([''green'']);'
              is_correct: true
              incorrect_feedback: null
      - id: 261165
        key: 8fe8828b-9f89-41d5-8f98-0ea3367de4d5
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 22:07:22 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Defaults and destructuring objects

          Just like array destructuring with array defaults, a function can have an object be a default parameter and use object destructuring:

          ```js
          function createSundae({scoops = 1, toppings = ['Hot Fudge']}) {
            const scoopText = scoops === 1 ? 'scoop' : 'scoops';
            return `Your sundae has ${scoops} ${scoopText} with ${toppings.join(' and ')} toppings.`;
          }

          createSundae({}); // Your sundae has 1 scoop with Hot Fudge toppings.
          createSundae({scoops: 2}); // Your sundae has 2 scoops with Hot Fudge toppings.
          createSundae({scoops: 2, toppings: ['Sprinkles']}); // Your sundae has 2 scoops with Sprinkles toppings.
          createSundae({toppings: ['Cookie Dough']}); // Your sundae has 1 scoop with Cookie Dough toppings.
          ```
          > **Returns:**<br>
          Your sundae has 1 scoop with Hot Fudge toppings.<br>
          Your sundae has 2 scoops with Hot Fudge toppings.<br>
          Your sundae has 2 scoops with Sprinkles toppings.<br>
          Your sundae has 1 scoop with Cookie Dough toppings.

          Just like the array example before, if you try calling the function without any arguments it won't work:

          ```js
          createSundae(); // throws an error
          ```
          > **Uncaught TypeError:** Cannot match against 'undefined' or 'null'.

          We can prevent this issue by providing a default object to the function:

          ```js
          function createSundae({scoops = 1, toppings = ['Hot Fudge']} = {}) {
            const scoopText = scoops === 1 ? 'scoop' : 'scoops';
            return `Your sundae has ${scoops} ${scoopText} with ${toppings.join(' and ')} toppings.`;
          }
          ```

          By adding an empty object as the default parameter in case no arguments are provided, calling the function without any arguments now works.

          ```js
          createSundae(); // Your sundae has 1 scoop with Hot Fudge toppings.
          ```
          > **Returns:** Your sundae has 1 scoop with Hot Fudge toppings.
        instructor_notes: ''
        resources: null
      - id: 261167
        key: 6ae998a7-b2d3-416a-ad6c-d2a4d6be6fda
        locale: en-us
        version: 1.0.0
        title: Destructuring With Object Defaults Parameter
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue Jan 24 2017 17:58:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Take a look at the following code:

            ```js
            function houseDescriptor({houseColor = 'green', shutterColors = ['red']} = {}) {
              return `I have a ${houseColor} house with ${shutterColors.join(' and ')} shutters`;
            }
            ```

            Which of the following choices will run without throwing an error?
          correct_feedback: 'Actually, every single one of these function calls will work correctly!'
          video_feedback: null
          default_feedback: Run the code yourself to test and see if each function call will run.
          answers:
            - id: a1485279245716
              text: 'houseDescriptor({houseColor: ''red'', shutterColors: [''white'', ''gray'', ''pink'']});'
              is_correct: true
              incorrect_feedback: null
            - id: a1485279263632
              text: 'houseDescriptor({houseColor: ''red''});'
              is_correct: true
              incorrect_feedback: null
            - id: a1485279264263
              text: houseDescriptor();
              is_correct: true
              incorrect_feedback: null
            - id: a1485279264768
              text: 'houseDescriptor({shutterColors: [''orange'', ''blue'']});'
              is_correct: true
              incorrect_feedback: null
            - id: a1485279265695
              text: 'houseDescriptor({});'
              is_correct: true
              incorrect_feedback: null
      - id: 261176
        key: 13ba0cf6-fcc5-4858-bff8-6e81e63e24db
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Sep 14 2017 22:10:05 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Array defaults vs. object defaults

          Default function parameters are a simple addition, but it makes our lives so much easier! One benefit of object defaults over array defaults is how they handle skipped options. Check this out:

          ```js
          function createSundae({scoops = 1, toppings = ['Hot Fudge']} = {}) { … }
          ```

          ...with the `createSundae()` function using object defaults with destructuring, if you want to use the default value for `scoops` but change the `toppings`, then all you need to do is pass in an object with `toppings`:

          ```js
          createSundae({toppings: ['Hot Fudge', 'Sprinkles', 'Caramel']});
          ```

          Compare the above example with the same function that uses array defaults with destructuring.

          ```js
          function createSundae([scoops = 1, toppings = ['Hot Fudge']] = []) { … }
          ```

          With this function setup, if you want to use the default number of `scoops` but change the `toppings`, you'd have to call your function a little...oddly:

          ```js
          createSundae([undefined, ['Hot Fudge', 'Sprinkles', 'Caramel']]);
          ```

          Since arrays are positionally based, we have to pass `undefined` to "skip" over the first argument (and accept the default) to get to the second argument.

          Unless you've got a strong reason to use array defaults with array destructuring, we recommend going with object defaults with object destructuring!
        instructor_notes: ''
        resources: null
  - id: 261217
    key: 161138bd-464c-4ccf-a7fd-2dded2cca5a4
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Using Default Function Parameters (2-2)'
    semantic_type: Concept
    updated_at: 'Mon Aug 28 2017 18:23:07 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261218
      - 261219
    atoms:
      - id: 261218
        key: 39735309-579c-4f2c-8a6f-5677c8d1fe65
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Apr 21 2017 23:24:53 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Create a `buildHouse()` function that accepts an object as a default parameter. The object should set the following properties to these default values:

          * `floors = 1`
          * `color = 'red'`
          * `walls = 'brick'`

          The function should return the following if no arguments or any empty object is passed to the function.

          ```text
          Your house has 1 floor(s) with red brick walls.
          ```

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 261219
        key: 99b7e4de-ae4f-4799-ac8c-24e12a896e2a
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Wed Jan 25 2017 16:26:29 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '5460848022781952'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var buildSelector = esquery.parse('[id.name="buildHouse"]');
                          // query AST with selector
                          var buildMatch = esquery.match(tree, buildSelector);
                          describe('Your code', function() {
                              // check if buildHouse exists
                              it('should have a function `buildHouse()`', function() {
                                  assert.isFunction(buildHouse, "The function `buildHouse()` doesn't exist");
                              });
                          });
                          if(buildMatch[0] !== null) {
                              describe('Your `buildHouse()` function', function() {
                                  it('should have one parameter', function() {
                                      assert.equal(buildMatch[0].params.length, 1, 'Your `buildHouse()` function should only have one parameter');
                                  });
                                  // define selector
                                  var objectPatternSelector = esquery.parse('ObjectPattern');
                                  var objectExpressionSelector = esquery.parse('ObjectExpression');
                                  // query AST with selector
                                  var objectPatternMatch = esquery.match(buildMatch[0], objectPatternSelector);
                                  var objectExpressionMatch = esquery.match(buildMatch[0], objectExpressionSelector);
                                  if(objectPatternMatch[0] !== undefined && objectExpressionMatch[0] !== undefined) {
                                      it('should accept an object and an empty object as a default parameter', function() {
                                          var both = objectPatternMatch.length + objectExpressionMatch.length
                                          assert.equal(both, 2, 'Your `buildHouse()` function doesn\'t accept an object and an empty object as a default parameter');
                                      });
                                      if(objectPatternMatch[0] !== null && objectExpressionMatch[0] !== null) {
                                          it('should set the `floors`, `color`, and `walls` properties to default values', function() {
                                              var x = objectPatternMatch[0].properties[0].key.name;
                                              var y = objectPatternMatch[0].properties[1].key.name;
                                              var z = objectPatternMatch[0].properties[2].key.name;
                                              assert.sameMembers([ x, y, z ], [ 'floors', 'color', 'walls' ], 'Your `buildHouse()` function doesn\'t set the `floors`, `color`, and `walls` properties to default values');
                                          });
                                          it('should produce the correct output when no arguments or any empty object is passed to it', function () {
                                              var correctOutput = 'Your house has 1 floor(s) with red brick walls.';
                                              var studentOutput = buildHouse();
                                              var studentOutput2 = buildHouse({});
                                              assert.includeMembers([ studentOutput, studentOutput2 ], [ correctOutput ], 'Your `buildHouse()` function doesn\'t produce the correct output when no arguments or any empty object is passed to it');
                                          });
                                          it('should produce the correct output when a valid object is passed to it', function () {
                                              var correctOutput = 'Your house has 3 floor(s) with yellow brick walls.';
                                              var studentOutput = buildHouse({floors: 3, color: 'yellow'});
                                              assert.equal(studentOutput, correctOutput, 'Your `buildHouse()` function doesn\'t produce the correct output when a valid object is passed to it');
                                          });
                                      }
                                  } else {
                                      it('should accept an object and an empty object as a default parameter', function() {
                                          assert.isOk(false, 'Your `buildHouse()` function doesn\'t accept an object and an empty object as a default parameter');
                                      });
                                  }
                              });
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 257662
    key: 5191a936-3491-4a25-a429-5d72acc35163
    locale: en-us
    version: 1.0.0
    title: Class Preview
    semantic_type: Concept
    updated_at: 'Thu Mar 16 2017 23:54:58 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 257668
    atoms:
      - id: 257668
        key: cc1cd079-9bd3-4d48-b01a-c5f6d997ad31
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Mar 16 2017 23:55:11 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Class Preview
          Here's a quick peek of what a JavaScript class look like:

          ```js
          class Dessert {
            constructor(calories = 250) {
              this.calories = calories;
            }
          }

          class IceCream extends Dessert {
            constructor(flavor, calories, toppings = []) {
              super(calories);
              this.flavor = flavor;
              this.toppings = toppings;
            }
            addTopping(topping) {
              this.toppings.push(topping);
            }
          }
          ```

          Notice the new `class` keyword right in front of `Dessert` and `IceCream`, or the new `extends` keyword in `class IceCream extends Dessert`? What about the call to `super()` inside the IceCream's `constructor()` method.

          There are a bunch of new keywords and syntax to play with when creating JavaScript classes. But, before we jump into the specifics of how to write JavaScript classes, we want to point out a rather confusing part about JavaScript compared with class-based languages.
        instructor_notes: ''
        resources: null
  - id: 213396
    key: 8f5f9b2b-c38c-47f6-af21-ae90eda29780
    locale: en-us
    version: 1.0.0
    title: JavaScript's Illusion of Classes
    semantic_type: Concept
    updated_at: 'Sun Aug 13 2017 22:26:31 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232934
    atoms:
      - id: 232934
        key: 852d1ff2-f15d-4224-8962-985ec90aa72c
        locale: en-us
        version: 1.0.0
        title: JavaScript's Illusion of Classes
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:20:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43134'
          youtube_id: ISfkX503dlQ
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f7b04_33-javascripts-illusion-of-classes/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b04_33-javascripts-illusion-of-classes/33-javascripts-illusion-of-classes_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b04_33-javascripts-illusion-of-classes/33-javascripts-illusion-of-classes_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b04_33-javascripts-illusion-of-classes/33-javascripts-illusion-of-classes_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b04_33-javascripts-illusion-of-classes/33-javascripts-illusion-of-classes_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b04_33-javascripts-illusion-of-classes/hls/playlist.m3u8'
  - id: 257669
    key: a9105c4c-2ffb-4865-b24e-de09f570eb37
    locale: en-us
    version: 1.0.0
    title: JavaScript Classes
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 18:18:03 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261199
    atoms:
      - id: 261199
        key: d5dde60a-6a0b-43a6-8894-574ce5fc6f81
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 18:18:09 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## ES5 "Class" Recap

          Since ES6 classes are just a mirage and hide the fact that prototypal inheritance is actually going on under the hood, let's quickly look at how to create a "class" with ES5 code:

          ```js
          function Plane(numEngines) {
            this.numEngines = numEngines;
            this.enginesActive = false;
          }

          // methods "inherited" by all instances
          Plane.prototype.startEngines = function () {
            console.log('starting engines...');
            this.enginesActive = true;
          };

          const richardsPlane = new Plane(1);
          richardsPlane.startEngines();

          const jamesPlane = new Plane(4);
          jamesPlane.startEngines();
          ```

          In the code above, the `Plane` function is a *constructor function* that will create new Plane objects. The data for a specific Plane object is passed to the `Plane` function and is set on the object. Methods that are "inherited" by each Plane object are placed on the `Plane.prototype` object. Then `richardsPlane` is created with one engine while `jamesPlane` is created with 4 engines. Both objects, however, use the same `startEngines` method to activate their respective engines.

          Things to note:

          * the constructor function is called with the `new` keyword
          * the constructor function, by convention, starts with a capital letter
          * the constructor function controls the setting of data on the objects that will be created
          * "inherited" methods are placed on the constructor function's prototype object

          Keep these in mind as we look at how ES6 classes work because, remember, ES6 classes set up all of this for you under the hood.

          ## ES6 Classes

          Here's what that same `Plane` class would like like if it were written using the new `class` syntax:

          ```js
          class Plane {
            constructor(numEngines) {
              this.numEngines = numEngines;
              this.enginesActive = false;
            }

            startEngines() {
              console.log('starting engines…');
              this.enginesActive = true;
            }
          }
          ```
        instructor_notes: ''
        resources: null
  - id: 213397
    key: 87ea1632-2d15-4185-8c4a-2061dcc71fd3
    locale: en-us
    version: 1.0.0
    title: Convert a Function to a Class
    semantic_type: Concept
    updated_at: 'Tue Jan 17 2017 23:47:33 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232935
    atoms:
      - id: 232935
        key: 55602fd2-c4d0-44b2-aa52-fd5484b7b054
        locale: en-us
        version: 1.0.0
        title: Convert a Function to a Class
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:16:45 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43135'
          youtube_id: JvpG_hX0-_0
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f7b06_36-l-convert-a-function-to-a-class/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b06_36-l-convert-a-function-to-a-class/36-l-convert-a-function-to-a-class_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b06_36-l-convert-a-function-to-a-class/36-l-convert-a-function-to-a-class_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b06_36-l-convert-a-function-to-a-class/36-l-convert-a-function-to-a-class_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b06_36-l-convert-a-function-to-a-class/36-l-convert-a-function-to-a-class_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b06_36-l-convert-a-function-to-a-class/hls/playlist.m3u8'
  - id: 257670
    key: 93153a84-fbee-4200-8ec6-6a41830e419f
    locale: en-us
    version: 1.0.0
    title: Working with JavaScript Classes
    semantic_type: Concept
    updated_at: 'Wed Apr 26 2017 23:29:51 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261200
      - 301421
      - 261202
      - 261206
    atoms:
      - id: 261200
        key: 75d2ac9d-5bdc-4ee9-9b4a-0343aeb935bb
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 18:38:21 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Class is just a function

          Just to prove that there isn't anything special about `class`, check out this code:

          ```js
          class Plane {
            constructor(numEngines) {
              this.numEngines = numEngines;
              this.enginesActive = false;
            }

            startEngines() {
              console.log('starting engines…');
              this.enginesActive = true;
            }
          }

          typeof Plane; // function
          ```
          > **Returns:** function

          That's right—it's just a function! There isn't even a new type added to JavaScript.
        instructor_notes: ''
        resources: null
      - id: 301421
        key: f0651bfc-f3d5-47db-81bf-47c5f697fc3c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 26 2017 23:30:55 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ## ⚠️  Where Are All The Commas? ⚠️  

          > Did you notice that there aren't any commas between the method definitions in the Class? Commas are not used to separate properties or methods in a Class. If you add them, you'll get a `SyntaxError` of `unexpected token ,`
        instructor_notes: ''
        resources: null
      - id: 261202
        key: 5aeefaa6-f3f5-4aa3-9f45-46b7aa630cdb
        locale: en-us
        version: 1.0.0
        title: ES6 Classes
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue Jan 24 2017 18:22:09 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Take a look at the following code:

            ```js
            class Animal {
              constructor(name = 'Sprinkles', energy = 100) {
                this.name = name;
                this.energy = energy;
              }

              eat(food) {
                this.energy += food / 3;
              }
            }
            ```

            Which of the following are true?
          correct_feedback: Options 1 and 3 are both true. Methods that appear in the class definition are placed on that class's prototype object and a class is just a function.
          video_feedback: null
          default_feedback: |-
            Option 1 is correct. Methods that appear in the class definition are, under the hood, placed on that class's prototype object.

            Option 2 is not correct. A class is actually just a function.

            Option 3 is correct. A class is a function.
          answers:
            - id: a1485281919970
              text: The `eat()` method ends up on `Animal.prototype`.
              is_correct: true
              incorrect_feedback: null
            - id: a1485281974750
              text: typeof Animal === 'class'
              is_correct: false
              incorrect_feedback: null
            - id: a1485281975278
              text: typeof Animal === 'function'
              is_correct: true
              incorrect_feedback: null
      - id: 261206
        key: 8afd56ad-c479-4177-aabd-0f3139ca3108
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 17 2017 00:02:02 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Static methods

          To add a static method, the keyword `static` is placed in front of the method name. Look at the `badWeather()` method in the code below.

          ```js
          class Plane {
            constructor(numEngines) {
              this.numEngines = numEngines;
              this.enginesActive = false;
            }

            static badWeather(planes) {
              for (plane of planes) {
                plane.enginesActive = false;
              }
            }

            startEngines() {
              console.log('starting engines…');
              this.enginesActive = true;
            }
          }
          ```

          See how `badWeather()` has the word `static` in front of it while `startEngines()` doesn't? That makes `badWeather()` a method that's accessed directly on the `Plane` class, so you can call it like this:

          ```js
          Plane.badWeather([plane1, plane2, plane3]);
          ```

          > **NOTE:** A little hazy on how constructor functions, class methods, or prototypal inheritance works? We've got a course on it! Check out [Object Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015).

          ## Benefits of classes

          1. Less setup
            * There's a lot less code that you need to write to create a function
          2. Clearly defined constructor function
            * Inside the class definition, you can clearly specify the constructor function.
          3. Everything's contained
            * All code that's needed for the class is contained in the class declaration. Instead of having the constructor function in one place, then adding methods to the prototype one-by-one, you can do everything all at once!

          ## Things to look out for when using classes

          1. `class` is not magic
            * The `class` keyword brings with it a lot of mental constructs from other, class-based languages. It doesn't magically add this functionality to JavaScript classes.
          2. `class` is a mirage over prototypal inheritance
            * We've said this many times before, but under the hood, a JavaScript class just uses prototypal inheritance.
          3. Using classes requires the use of `new`
            * When creating a new instance of a JavaScript class, the `new` keyword must be used

          For example,

          ```js
          class Toy {
             ...
          }

          const myToy1 = Toy(); // throws an error
          ```
          > **Uncaught TypeError:** Class constructor Toy cannot be invoked without 'new'

          but, adding the `new` keyword fixes the problem

          ```js
          const myToy2 = new Toy(); // this works!
          ```
        instructor_notes: ''
        resources: null
  - id: 261207
    key: 6b91f1d9-e0e0-43b7-815f-1a9a47b78a1d
    locale: en-us
    version: 1.0.0
    title: Super and Extends
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 18:53:31 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261208
    atoms:
      - id: 261208
        key: 4f06fd12-a120-4fa0-b116-eba75cd6eb87
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Mar 16 2017 23:58:08 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Subclasses with ES6

          Now that we've looked at creating classes in JavaScript. Let's use the new `super` and `extends` keywords to extend a class.

          ```js
          class Tree {
            constructor(size = '10', leaves = {spring: 'green', summer: 'green', fall: 'orange', winter: null}) {
              this.size = size;
              this.leaves = leaves;
              this.leafColor = null;
            }

            changeSeason(season) {
              this.leafColor = this.leaves[season];
              if (season === 'spring') {
                this.size += 1;
              }
            }
          }

          class Maple extends Tree {
            constructor(syrupQty = 15, size, barkColor, leaves) {
              super(size, barkColor, leaves);
              this.syrupQty = syrupQty;
            }

            changeSeason(season) {
              super.changeSeason(season);
              if (season === 'spring') {
                this.syrupQty += 1;
              }
            }

            gatherSyrup() {
              this.syrupQty -= 3;
            }
          }

          const myMaple = new Maple(15, 5);
          myMaple.changeSeason('fall');
          myMaple.gatherSyrup();
          myMaple.changeSeason('spring');
          ```

          Both `Tree` and `Maple` are JavaScript classes. The `Maple` class is a "subclass" of `Tree` and uses the `extends` keyword to set itself as a "subclass". To get from the "subclass" to the parent class, the `super` keyword is used. Did you notice that `super` was used in two different ways? In `Maple`'s constructor method, `super` is used as a function. In `Maple`'s `changeSeason()` method, `super` is used as an object!

          ## Compared to ES5 subclasses

          Let's see this same functionality, but written in ES5 code:

          ```js
          function Tree() {
            this.size = size || 10;
            this.leaves = leaves || {spring: 'green', summer: 'green', fall: 'orange', winter: null};
            this.leafColor;
          }

          Tree.prototype.changeSeason = function(season) {
            this.leafColor = this.leaves[season];
            if (season === 'spring') {
              this.size += 1;
            }
          }

          function Maple (syrupQty, size, barkColor, leaves) {
            Tree.call(this, size, barkColor, leaves);
            this.syrupQty = syrupQty || 15;
          }

          Maple.prototype = Object.create(Tree.prototype);
          Maple.prototype.constructor = Maple;

          Maple.prototype.changeSeason = function(season) {
            Tree.prototype.changeSeason.call(this, season);
            if (season === 'spring') {
              this.syrupQty += 1;
            }
          }

          Maple.prototype.gatherSyrup = function() {
            this.syrupQty -= 3;
          }

          const myMaple = new Maple(15, 5);
          myMaple.changeSeason('fall');
          myMaple.gatherSyrup();
          myMaple.changeSeason('spring');
          ```

          Both this code and the class-style code above achieve the same functionality.
        instructor_notes: ''
        resources: null
  - id: 213398
    key: 358ada89-6344-4eda-bdec-3ffe27918773
    locale: en-us
    version: 1.0.0
    title: Extending Classes from ES5 to ES6
    semantic_type: Concept
    updated_at: 'Tue Jan 17 2017 23:47:37 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232936
    atoms:
      - id: 232936
        key: c338be91-9a76-447f-922e-9d77989e129d
        locale: en-us
        version: 1.0.0
        title: Extending Classes from ES5 to ES6
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:18:03 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43222'
          youtube_id: b8fEBUFk-Oo
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/5842269e_44-l-comparing-es5-and-es6-code/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/5842269e_44-l-comparing-es5-and-es6-code/44-l-comparing-es5-and-es6-code_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/5842269e_44-l-comparing-es5-and-es6-code/44-l-comparing-es5-and-es6-code_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/5842269e_44-l-comparing-es5-and-es6-code/44-l-comparing-es5-and-es6-code_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/5842269e_44-l-comparing-es5-and-es6-code/44-l-comparing-es5-and-es6-code_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/5842269e_44-l-comparing-es5-and-es6-code/hls/playlist.m3u8'
  - id: 261209
    key: 6d5a83b9-159a-458b-83f9-573f7372f874
    locale: en-us
    version: 1.0.0
    title: Working with JavaScript Subclasses
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 19:07:44 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261210
      - 261211
      - 261212
    atoms:
      - id: 261210
        key: d226819c-bcd9-4a3b-94ff-53e1d8762e00
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jan 24 2017 19:04:22 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Working with subclasses

          Like most of the new additions, there's a lot less setup code and it's a lot cleaner syntax to create a subclass using `class`, `super`, and `extends`.

          Just remember that, under the hood, the same connections are made between functions and prototypes.

          ### `super` must be called before `this`

          In a subclass constructor function, before `this` can be used, a call to the super class must be made.

          ```js
          class Apple {}
          class GrannySmith extends Apple {
            constructor(tartnessLevel, energy) {
              this.tartnessLevel = tartnessLevel; // `this` before `super` will throw an error!
              super(energy); 
            }
          }
          ```
        instructor_notes: ''
        resources: null
      - id: 261211
        key: f2087099-1587-4188-8678-19cdf2fdbbb6
        locale: en-us
        version: 1.0.0
        title: instanceOf Quiz
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Jan 24 2017 19:06:03 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Take a look at the following code:

            ```js
            class Toy {}
            class Dragon extends Toy {}
            const dragon1 = new Dragon();
            ```

            Given the code above, is the following statement true or false?

            ```js
            dragon1 instanceof Toy;
            ```
          correct_feedback: 'The `dragon1` variable is an object created by the `Dragon` class, and since the `Dragon` class extends the `Toy` class, `dragon1` is also considered an instance of `Toy`.'
          video_feedback: null
          default_feedback: 'The `dragon1` variable is an object created by the `Dragon` class, and since the `Dragon` class extends the `Toy` class, `dragon1` is also considered an instance of `Toy`.'
          answers:
            - id: a1485284684918
              text: 'true'
              is_correct: true
              incorrect_feedback: null
            - id: a1485284732754
              text: 'false'
              is_correct: false
              incorrect_feedback: null
      - id: 261212
        key: 883c746c-2173-4ede-9907-321aef986f1e
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Jan 24 2017 19:09:00 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Let's say that a `Toy` class exists and that a `Dragon` class extends the `Toy` class.

            What is the correct way to create a `Toy` object from inside the `Dragon` class's `constructor` method?
          correct_feedback: Option 1 is the correct way to call the super class from within the subclass's constructor function.
          video_feedback: null
          default_feedback: Option 1 is the correct way to call the super class from within the subclass's constructor function.
          answers:
            - id: a1485284836854
              text: super();
              is_correct: true
              incorrect_feedback: null
            - id: a1485284856342
              text: super.call(this);
              is_correct: false
              incorrect_feedback: null
            - id: a1485284856945
              text: parent();
              is_correct: false
              incorrect_feedback: null
            - id: a1485284857401
              text: Toy();
              is_correct: false
              incorrect_feedback: null
  - id: 261220
    key: 54bdd363-83d7-46e2-81d1-9d1d647a908f
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Building Classes and Subclasses (2-3)'
    semantic_type: Concept
    updated_at: 'Tue Jan 24 2017 19:21:36 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 261221
      - 261222
    atoms:
      - id: 261221
        key: 8d486683-555a-46e7-8da5-c589b6b72229
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Sep 05 2017 16:41:15 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Directions:

          Create a `Bicycle` subclass that extends the `Vehicle` class. The `Bicycle` subclass should override `Vehicle`'s constructor function by changing the default values for `wheels` from `4` to `2` and `horn` from `'beep beep'` to `'honk honk'`.

          ## Your Code:
        instructor_notes: ''
        resources: null
      - id: 261222
        key: a2d476ce-f0fb-41be-8aed-fc2ea8b15cf2
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: QuizAtom
        updated_at: 'Wed Jan 25 2017 17:26:07 GMT+0000 (UTC)'
        is_public: true
        resources: null
        instructor_notes: ''
        instruction: null
        question:
          title: ''
          semantic_type: ProgrammingQuestion
          evaluation_id: '6444210480873472'
          evaluator:
            model: ProgramEvaluator
            execution_language: python
            executor_grading_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'submit'])
            executor_test_code: |-
              import falcon.util as util

              util.run_program(['python', 'falcon.py', '-s', 'js_mocha', '-m', 'test'])
            gae_grading_code: |-
              """Provide feedback to student based on evaluation of JavaScript programming quiz."""

              import json

              # until we check, assume student's submission is incorrect
              grade_result['correct'] = False

              # don't use, but must set to ' ' to avoid error
              grade_result['comment'] = ' '

              # use default markdown?
              use_default_markdown = True

              def parse_swizzled_output(output):
                  """Analyzes the swizzled output for passing/failing criteria and other feedback.
                      
                      Args:
                      output (string): Output generated when running swizzled main.
                      """
                  # keep running total of (passed) criteria
                  numberOfCriteria = 0
                  numberOfPasses = 0
                  passed_criteria = []
                  failed_criteria = []
                  feedback = []
                  # split lines by newline
                  lines = output.split('\n')
                  # go line-by-line and find formatted tags for criteria
                  for line in lines:
                      if line.startswith('<PASS::>'):
                          numberOfCriteria += 1
                          numberOfPasses += 1
                          # strip tag and add criteria to array
                          passed_criteria.append(line[8:])
                      if line.startswith('<FAIL::>'):
                          numberOfCriteria += 1
                          # strip tag and add criteria to array
                          failed_criteria.append(line[8:])
                      if line.startswith('<FEEDBACK::>'):
                          # strip tag and add feedback to array
                          feedback.append(line[12:])
                  # return results
                  return (numberOfCriteria == numberOfPasses, passed_criteria, failed_criteria, feedback)

              def default_markdown_from_criteria(passing_criteria, failing_criteria):
                  """Generates default markdown-like string based on passing/failing criteria.

                      Args:
                      passing_criteria (list): All passing criteria from quiz
                      failing_criteria (list): All failing criteria from quiz
                      """
                  # init markdown-like string
                  markdown = ''
                  # was there more than 1 criteria?
                  if passing_criteria + failing_criteria > 1:
                      # add passing criteria to markdown
                      if len(passing_criteria) >= 1:
                          markdown += '# What Went Well\n\n'
                          for criteria in passing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                      # add failing criteria to markdown
                      if len(failing_criteria) >= 1:
                          markdown += '# What Went Wrong\n\n'
                          for criteria in failing_criteria:
                              markdown += '<li style="list-style-type: none;">- ' + criteria + '</li>'
                          markdown += '\n'
                  else:
                      # if only 1 criteria, add it without headers to markdown
                      markdown = passing_criteria[0] if grade_result['correct'] else failing_criteria[0]
                  # return markdown-like string
                  return markdown

              def main():
                  """Analyze the output generated by Falcon and set special key/value pairs for feedback."""
                  # did the remote execution cause an error?
                  if executor_result['stderr'] == '':
                      # nope! analyze the output (JSON-like string)
                      try:
                          # convert JSON-like string into Python dictionary
                          results = json.loads(executor_result['stdout'])
                          swizzle_out = results['temp/results-out.txt']
                      except Exception as e:
                          # if there was an error during the conversion, display it
                          grade_result['feedback'] = executor_result['stderr']
                      else:
                          # did the execution of swizzled main produce an error?
                          if results['temp/results-err.txt'] == '':
                              # nope! we can safely use the output of swizzled main
                              (submission_correct, passing_criteria, failing_criteria, feedback) = parse_swizzled_output(swizzle_out)
                              # set pass/fail
                              grade_result['correct'] = submission_correct
                              if use_default_markdown == True:
                                  # use default markdown for criteria/feedback
                                  markdown_feedback = default_markdown_from_criteria(passing_criteria, failing_criteria)
                                  total_criteria = len(failing_criteria) + len(passing_criteria)
                                  all_feedback = markdown_feedback + '# Feedback\n\n'
                                  if len(failing_criteria) == 0:
                                      all_feedback += 'Your answer passed all our tests! Awesome job!'
                                  elif len(passing_criteria) >= total_criteria / 2:
                                      all_feedback += 'Not everything is correct yet, but you\'re close!'
                                  else:
                                      all_feedback += 'There\'s work left to do. Try tackling one problem at a time.'
                                  grade_result['feedback'] = all_feedback
                                  # grade_result['comment'] = results['temp/student-out.txt']
                              else:
                                  # show raw response from REX execution
                                  grade_result['feedback'] = str(results)
                          else:
                              # swizzled main generated some an error, so display it!
                              grade_result['feedback'] = 'An error occurred while testing your code.\n\nCheck to ensure these items are true:\n\n- clicking **TEST RUN** doesn\'t produce any issues\n- you\'ve followed all instructions\n- you\'ve used the correct names\n\nIf you make all these checks, but it still doesn\'t fix the error, then please contact us at *support@udacity.com* and provide a link to the quiz and a copy of your code.\n\nNOTE: If you cannot find the instructions, click **RESET QUIZ** to reset the quiz to its original state.'
                  else:
                      # there was an error with overall execution, so display it!
                      grade_result['comment'] = executor_result['stderr']

              main()
            requires_gpu: false
            deadline_seconds: 0
            legacy_template_refs:
              - key: '5141761099956224'
                ref: ProgramTemplate
            included_text_files:
              - text: |
                  var logBackup = console.log;
                  var logMessages = [];
                  console.log = function() {
                      logMessages.push.apply(logMessages, arguments);
                      logBackup.apply(console, arguments);
                  };
                name: SwizzleBefore.js
              - text: |-
                  // tests to verify the student's code
                  ;(function() {
                      // require assertion library, javascript parser, querying library, and file system
                      var chai = require('chai');
                      var esprima = require('esprima');
                      var esquery = require('esquery');
                      var fs = require('fs');

                      var assert = chai.assert;
                      var tree = '';
                      var content = '';

                      // get students' file
                      content = fs.readFileSync(__dirname + '/StudentMain.js', 'utf8');
                      // generate abstract systax tree (AST)
                      tree = esprima.parse(content);

                      // define selector
                      var bodySelector = esquery.parse('[body]');
                      // query AST with selector
                      var bodyMatch = esquery.match(tree, bodySelector);

                      // tests
                      if(bodyMatch[0].body.length !== 0) {
                          // define selector
                          var vehicleSelector = esquery.parse('ClassDeclaration[id.name="Vehicle"]');
                          var bycicleSelector = esquery.parse('ClassDeclaration[id.name="Bicycle"]');
                          // query AST with selector
                          var vehicleMatch = esquery.match(tree, vehicleSelector);
                          var bycicleMatch = esquery.match(tree, bycicleSelector);
                          describe('Your code', function() {
                              // check if Vehicle exists
                              it('should have a class `Vehicle`', function() {
                                  assert.equal(vehicleMatch.length, 1, "The class `Vehicle` doesn't exist");
                              });
                              // check if Bicycle exists
                              it('should have a class `Bicycle`', function() {
                                  assert.equal(bycicleMatch.length, 1, "The class `Bicycle` doesn't exist");
                              });
                          });
                          if(vehicleMatch[0] !== null && bycicleMatch[0] !== null) {
                              describe('Your class `Bicycle`', function() {
                                  // check if Bicycle extends Vehicle
                                  it('should be a subclass of the class `Vehicle`', function() {
                                      if(bycicleMatch[0].superClass !== null) {
                                          assert.equal(bycicleMatch[0].superClass.name, 'Vehicle', 'Your class `Bicycle` isn\'t a subclass of the class `Vehicle`');
                                      } else {
                                          assert.isOk(false, 'Your class `Bicycle` isn\'t a subclass of the class `Vehicle`');
                                      }
                                  });
                              });
                              // define selector
                              var constructorSelector = esquery.parse('MethodDefinition[key.name="constructor"]');
                              // query AST with selector
                              var constructorMatch = esquery.match(bycicleMatch[0], constructorSelector);
                              if(constructorMatch[0] !== undefined) {
                                  describe('Your class `Bicycle`', function() {
                                      it('should have a constructor', function() {
                                          assert.isOk(true);
                                      });
                                  });
                                  describe('Your `Bicycle`\'s constructor', function() {
                                      if(constructorMatch[0].value.params.length === 3) {
                                          it('should set default values for `color`, `wheels`, and `horn`', function() {
                                              var x;
                                              if(constructorMatch[0].value.params[0].left === undefined) {
                                                  x = constructorMatch[0].value.params[0].name;
                                              } else {
                                                  x = constructorMatch[0].value.params[0].left.name;
                                              }
                                              var y = constructorMatch[0].value.params[1].left.name;
                                              var z = constructorMatch[0].value.params[2].left.name;
                                              assert.sameMembers([ x, y, z ], [ 'color', 'wheels', 'horn' ], 'Your `Bicycle`\s constructor doesn\'t set default values for `color`, `wheels`, and `horn`');
                                          });
                                      } else {
                                          it('should set default values for `color`, `wheels`, and `horn`', function() {
                                              assert.isOk(false, 'Your `Bicycle`\s constructor doesn\'t set default values for `color`, `wheels`, and `horn`');
                                          });
                                      }
                                  });
                                  describe('Your `Bicycle`\'s constructor', function() {
                                      it('should override `Vehicle`\'s constructor as specified in the directions', function() {
                                          var studentBicycle = new Bicycle();
                                          var check1 = studentBicycle.color === 'blue';
                                          var check2 = studentBicycle.wheels === 2;
                                          var check3 = studentBicycle.horn === 'honk honk';
                                          assert.equal(check1 && check2 && check3, true, 'Your `Bicycle`\'s constructor doesn\'t override `Vehicle`\'s constructor as specified in the directions');
                                      });
                                  });
                              } else {
                                  describe('Your class `Bicycle`', function() {
                                      it('should have a constructor', function() {
                                          assert.isOk(false, 'Your class `Bicycle` doesn\'t have a constructor');
                                      });
                                  });
                              }
                          }
                      } else {
                          describe('Your code', function() {
                              it('should not be empty', function() {
                                  assert.isOk(false, 'Your code is missing, hit the "Reset Quiz" button to reset the quiz');
                              });
                          });
                      }

                  }());
                name: SwizzleAfter.js
        answer: null
  - id: 196710
    key: 478312f8-cc06-4190-8bb9-f9b4445f1596
    locale: en-us
    version: 1.0.0
    title: Lesson 2 Summary
    semantic_type: Concept
    updated_at: 'Fri Dec 23 2016 04:55:17 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 232937
    atoms:
      - id: 232937
        key: e631456e-0cc0-4d9d-9dce-7acb2489f7b5
        locale: en-us
        version: 1.0.0
        title: Lesson 2 Summary
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:18:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '43137'
          youtube_id: x-2IDhoLS_g
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2016/December/583f7b0c_48-outro/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b0c_48-outro/48-outro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b0c_48-outro/48-outro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b0c_48-outro/48-outro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b0c_48-outro/48-outro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/583f7b0c_48-outro/hls/playlist.m3u8'
